#ifndef MYMFC_H
#define MYMFC_H
#include "AiEsp32RotaryEncoder.h"
#include "SPI.h"
#include <FreeRTOS.h>
#include <task.h>
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include "Adafruit_GFX.h"
#include "Adafruit_ST7796S_kbv.h"
class myMFC {
  private:
    int potPos;
    bool begin;
    unsigned long lastTimePressed;
    double potPerc;
    int potPin;
    int adcPin;
    long interval;
    int inputX;
    int inputY;
    int outputX;
    int outputY;
    double* array;
    int prevPosition;  
    int counter;
    double percentTotal;

  public:
    myMFC(int potpin, int adcpin, int x1, int y1, int x2, int y2, double* arr);
    void on(Adafruit_ST7796S_kbv tft);
    void rotaryRead(AiEsp32RotaryEncoder encoder, bool change, bool clicked, Adafruit_ST7796S_kbv tft);
    void setPosition(long data);
    String getPercent();
    int PercenttoPosition(double percent);
    int getPos();
    void updateInput(Adafruit_ST7796S_kbv tft);
    void updateOutput(Adafruit_ST7796S_kbv tft);
    void populateArray();
    int binarySearch(double target);
};

myMFC::myMFC(int potpin, int adcpin, int x1, int y1, int x2, int y2, double* arr){
  potPin = potpin;
  adcPin = adcpin,
  potPos = 0;
  lastTimePressed = 0;
  interval = 0;
  potPerc = 0;
  inputX = x1;
  inputY = y1;
  outputX = x2;
  outputY = y2;
  counter = 0;
  percentTotal = 0;
  SPI.begin();
  SPI.setDataMode(SPI_MODE3);

  pinMode(potPin, OUTPUT);
  pinMode(adcPin, OUTPUT);
  
  array = new double[1024];
  for (int i = 0; i < 1024; i++) {
    array[i] = arr[i];
  }
}
void myMFC::on(Adafruit_ST7796S_kbv tft){
  updateOutput(tft);
}
void myMFC::rotaryRead(AiEsp32RotaryEncoder encoder, bool change, bool clicked, Adafruit_ST7796S_kbv tft){
  if(change){
    long value = encoder.readEncoder();
    potPerc = (double) value/1000;
    potPos = PercenttoPosition(potPerc);
    Serial.println(potPerc);
    Serial.println("Pot Posotion: " + (String) potPos);
    updateInput(tft);
  }
  if (clicked)
	{
	  //ignore multiple press in that time milliseconds
	  if (millis() - lastTimePressed < 50)
	  {
		  return;
	  }
    lastTimePressed = millis();
    if(binarySearch((double)potPos*100/1023) == -1){
      setPosition(potPos);
    }
    else{
    setPosition(binarySearch((double)potPos*100/1023));
    }
  }
}
void myMFC::setPosition(long data){
  SPI.beginTransaction(SPISettings(7000000, MSBFIRST, SPI_MODE3));
  digitalWrite(potPin, LOW);
  byte command = 0x0;
  byte byte0 = (data & 0x03) << 6;
  byte byte1 = (data & 0x3FC) >> 2;
  SPI.transfer(command);
  SPI.transfer(byte1);
  SPI.transfer(byte0);
  digitalWrite(potPin, HIGH);
  SPI.endTransaction();
  Serial.print("POT: ");
  Serial.println((double) data*5/1023);
}
String myMFC::getPercent(){
  SPI.beginTransaction(SPISettings(5000000, MSBFIRST, SPI_MODE3));
  digitalWrite(adcPin, LOW);
  delay(20);
  byte byte1 = SPI.transfer(0x00); // Most significant byte
  byte byte2 = SPI.transfer(0x00); // Middle byte
  byte byte3 = SPI.transfer(0x00);
  digitalWrite(adcPin, HIGH);
  SPI.endTransaction();
  unsigned long receivedData = (byte1 << 16) | (byte2 << 8) | byte3;
  float convertedData = ((float)receivedData*100/2097151);
  return (String) convertedData;
}
int myMFC::PercenttoPosition(double percent){
  double position = percent * 1023;
  int decimal = position - floor(position);
  if(decimal >= .5){
    position = ceil(position);
  }
  else{
    position = floor(position);
  }
  return position;
}

int myMFC::getPos(){
  return potPos;
}

void myMFC::updateInput(Adafruit_ST7796S_kbv tft){
tft.fillRect(inputX, inputY, 85, 20, ST7796S_BLACK);
tft.setCursor(inputX, inputY);
tft.setTextSize(2);
tft.println((String)((double)(potPos)*100/1023) + "%");
}

void myMFC::updateOutput(Adafruit_ST7796S_kbv tft){
if(millis()-interval > 142){
  percentTotal = percentTotal + getPercent().toDouble() ;
  counter++;
  if(counter == 7){
    tft.fillRect(outputX, outputY, 75, 20, ST7796S_BLACK);
    tft.setCursor(outputX, outputY);
    tft.setTextSize(2);
    if((percentTotal/7)>0 && (percentTotal/7)<=100){
      tft.println((String) (percentTotal/7) + "%");
    }
    else{
      tft.println((String) (0) + "%");
    }
    counter = 0;
    percentTotal = 0;
  }
  interval = millis();
}
}

int myMFC::binarySearch(double target){
  int low = 0;
  int high = 1024 - 1;

  while (low <= high) {
    int mid = low + (high - low) / 2; // Prevents overflow

    if (array[mid] <= target+0.06 && array[mid] >= target-0.06) {
      return mid; // Target found
    }
    if (array[mid] < target) {
      low = mid + 1; // Search the right half
    } else {
      high = mid - 1; // Search the left half
    }
  }
  return -1;
}


#endif

#define TFT_CS 4
#define TFT_DC 6
#define TFT_RST 5 
#define MOSI 11
#define SCK 12
#define MISO 13

long lastPressed = 0;
long value = 0;
int selector = 0;

Adafruit_ST7796S_kbv tft = Adafruit_ST7796S_kbv(TFT_CS, TFT_DC, TFT_RST);
long refresh = 0;

AiEsp32RotaryEncoder encoder1 = AiEsp32RotaryEncoder(15, 16, 17, -1, 4);
bool change1 = false;
bool click1 = false;
int previousPosition = 1;

double arr1[] = {0.31, 0.40, 0.50, 0.60, 0.69, 0.79, 0.88, 0.98, 1.08, 1.17, 1.27, 1.36, 1.46, 1.55, 1.65, 1.75, 1.84, 1.94, 2.03, 2.13, 2.23, 2.32, 2.42, 2.51, 2.61, 2.70, 2.80, 2.90, 2.99, 3.09, 3.19, 3.28, 3.42, 3.52, 3.61, 3.71, 3.80, 3.90, 4.00, 4.09, 4.19, 4.28, 4.38, 4.48, 4.57, 4.67, 4.76, 4.86, 4.95, 5.05, 5.15, 5.24, 5.34, 5.44, 5.53, 5.63, 5.72, 5.82, 5.91, 6.01, 6.11, 6.20, 6.30, 6.39, 6.53, 6.63, 6.73, 6.82, 6.92, 7.01, 7.11, 7.21, 7.30, 7.40, 7.49, 7.59, 7.68, 7.78, 7.88, 7.97, 8.07, 8.16, 8.26, 8.36, 8.45, 8.55, 8.64, 8.74, 8.83, 8.93, 9.02, 9.12, 9.21, 9.31, 9.41, 9.51, 9.64, 9.74, 9.83, 9.93, 10.03, 10.13, 10.22, 10.32, 10.41, 10.51, 10.61, 10.70, 10.80, 10.89, 10.99, 11.08, 11.18, 11.27, 11.37, 11.47, 11.56, 11.66, 11.75, 11.85, 11.95, 12.04, 12.14, 12.23, 12.33, 12.42, 12.52, 12.62, 12.75, 12.85, 12.95, 13.04, 13.14, 13.23, 13.33, 13.43, 13.52, 13.62, 13.72, 13.81, 13.91, 14.00, 14.10, 14.19, 14.29, 14.39, 14.48, 14.58, 14.67, 14.77, 14.86, 14.96, 15.06, 15.15, 15.25, 15.34, 15.44, 15.54, 15.63, 15.73, 15.87, 15.96, 16.06, 16.15, 16.25, 16.35, 16.44, 16.54, 16.63, 16.73, 16.83, 16.92, 17.02, 17.12, 17.21, 17.31, 17.40, 17.50, 17.59, 17.69, 17.79, 17.88, 17.98, 18.07, 18.17, 18.26, 18.36, 18.46, 18.55, 18.65, 18.74, 18.84, 18.98, 19.08, 19.17, 19.27, 19.36, 19.46, 19.56, 19.65, 19.75, 19.84, 19.94, 20.04, 20.13, 20.23, 20.32, 20.42, 20.51, 20.61, 20.71, 20.80, 20.90, 20.99, 21.09, 21.18, 21.28, 21.38, 21.47, 21.57, 21.66, 21.76, 21.86, 21.95, 22.09, 22.19, 22.28, 22.38, 22.48, 22.57, 22.67, 22.76, 22.86, 22.96, 23.05, 23.15, 23.24, 23.34, 23.43, 23.53, 23.63, 23.72, 23.82, 23.92, 24.01, 24.11, 24.20, 24.30, 24.39, 24.49, 24.58, 24.68, 24.78, 24.87, 24.97, 25.06, 25.20, 25.30, 25.40, 25.49, 25.59, 25.68, 25.78, 25.88, 25.97, 26.07, 26.16, 26.26, 26.35, 26.45, 26.55, 26.64, 26.74, 26.83, 26.93, 27.03, 27.12, 27.22, 27.31, 27.41, 27.51, 27.60, 27.70, 27.79, 27.89, 27.99, 28.08, 28.18, 28.32, 28.41, 28.51, 28.61, 28.70, 28.80, 28.89, 28.99, 29.09, 29.18, 29.28, 29.37, 29.47, 29.57, 29.66, 29.76, 29.85, 29.95, 30.04, 30.14, 30.24, 30.33, 30.43, 30.52, 30.62, 30.72, 30.81, 30.91, 31.00, 31.10, 31.19, 31.29, 31.43, 31.53, 31.62, 31.72, 31.82, 31.91, 32.01, 32.10, 32.20, 32.29, 32.39, 32.49, 32.58, 32.68, 32.78, 32.87, 32.96, 33.06, 33.16, 33.25, 33.35, 33.44, 33.54, 33.64, 33.73, 33.83, 33.92, 34.02, 34.12, 34.21, 34.31, 34.40, 34.54, 34.64, 34.73, 34.83, 34.93, 35.02, 35.12, 35.22, 35.31, 35.41, 35.50, 35.60, 35.70, 35.79, 35.89, 35.98, 36.08, 36.18, 36.27, 36.37, 36.46, 36.56, 36.65, 36.75, 36.84, 36.94, 37.04, 37.13, 37.23, 37.32, 37.42, 37.52, 37.66, 37.75, 37.85, 37.94, 38.04, 38.14, 38.23, 38.33, 38.42, 38.52, 38.62, 38.71, 38.81, 38.90, 39.00, 39.10, 39.19, 39.29, 39.38, 39.48, 39.58, 39.67, 39.77, 39.86, 39.96, 40.06, 40.15, 40.25, 40.34, 40.44, 40.53, 40.63, 40.77, 40.87, 40.96, 41.06, 41.15, 41.25, 41.35, 41.44, 41.54, 41.63, 41.73, 41.82, 41.92, 42.02, 42.12, 42.21, 42.31, 42.40, 42.50, 42.59, 42.69, 42.78, 42.88, 42.98, 43.07, 43.17, 43.26, 43.36, 43.46, 43.55, 43.65, 43.74, 43.88, 43.98, 44.08, 44.17, 44.27, 44.36, 44.46, 44.56, 44.65, 44.75, 44.84, 44.94, 45.04, 45.13, 45.23, 45.32, 45.42, 45.52, 45.61, 45.71, 45.81, 45.90, 45.99, 46.09, 46.19, 46.28, 46.38, 46.48, 46.57, 46.67, 46.77, 46.86, 47.00, 47.09, 47.19, 47.29, 47.38, 47.48, 47.58, 47.67, 47.77, 47.86, 47.96, 48.06, 48.15, 48.25, 48.34, 48.44, 48.54, 48.63, 48.73, 48.83, 48.92, 49.02, 49.11, 49.21, 49.30, 49.40, 49.50, 49.59, 49.69, 49.78, 49.88, 49.98, 50.12, 50.21, 50.31, 50.40, 50.50, 50.60, 50.69, 50.79, 50.89, 50.98, 51.08, 51.17, 51.27, 51.37, 51.46, 51.56, 51.66, 51.75, 51.85, 51.95, 52.04, 52.14, 52.23, 52.33, 52.43, 52.52, 52.62, 52.71, 52.81, 52.91, 53.00, 53.10, 53.24, 53.34, 53.43, 53.53, 53.62, 53.72, 53.82, 53.91, 54.01, 54.10, 54.20, 54.29, 54.39, 54.49, 54.58, 54.68, 54.77, 54.87, 54.97, 55.06, 55.16, 55.25, 55.35, 55.45, 55.54, 55.64, 55.73, 55.83, 55.92, 56.02, 56.11, 56.21, 56.35, 56.45, 56.54, 56.64, 56.73, 56.83, 56.93, 57.02, 57.12, 57.21, 57.31, 57.41, 57.50, 57.60, 57.70, 57.79, 57.89, 57.98, 58.08, 58.17, 58.27, 58.37, 58.46, 58.56, 58.65, 58.75, 58.84, 58.94, 59.04, 59.13, 59.23, 59.32, 59.46, 59.56, 59.65, 59.75, 59.85, 59.94, 60.04, 60.13, 60.23, 60.32, 60.42, 60.52, 60.62, 60.71, 60.81, 60.90, 61.00, 61.09, 61.19, 61.28, 61.38, 61.48, 61.57, 61.67, 61.76, 61.86, 61.96, 62.05, 62.15, 62.24, 62.34, 62.44, 62.57, 62.67, 62.77, 62.86, 62.96, 63.06, 63.15, 63.25, 63.34, 63.44, 63.53, 63.63, 63.73, 63.82, 63.92, 64.01, 64.11, 64.20, 64.30, 64.40, 64.49, 64.59, 64.68, 64.78, 64.88, 64.97, 65.07, 65.16, 65.26, 65.35, 65.45, 65.55, 65.69, 65.78, 65.88, 65.97, 66.07, 66.17, 66.26, 66.36, 66.45, 66.55, 66.64, 66.74, 66.84, 66.93, 67.03, 67.12, 67.22, 67.31, 67.41, 67.51, 67.60, 67.70, 67.79, 67.89, 67.99, 68.08, 68.18, 68.27, 68.37, 68.47, 68.56, 68.66, 68.80, 68.89, 68.99, 69.09, 69.18, 69.28, 69.37, 69.47, 69.56, 69.66, 69.75, 69.85, 69.95, 70.04, 70.14, 70.24, 70.33, 70.43, 70.52, 70.62, 70.71, 70.81, 70.91, 71.00, 71.09, 71.19, 71.29, 71.38, 71.48, 71.57, 71.67, 71.77, 71.91, 72.00, 72.10, 72.20, 72.29, 72.39, 72.48, 72.58, 72.67, 72.77, 72.87, 72.96, 73.06, 73.15, 73.25, 73.35, 73.44, 73.54, 73.63, 73.73, 73.82, 73.92, 74.02, 74.11, 74.21, 74.30, 74.40, 74.49, 74.59, 74.69, 74.78, 74.88, 75.02, 75.11, 75.21, 75.31, 75.40, 75.50, 75.59, 75.69, 75.79, 75.88, 75.98, 76.07, 76.17, 76.26, 76.36, 76.45, 76.55, 76.65, 76.74, 76.84, 76.93, 77.03, 77.13, 77.22, 77.32, 77.41, 77.51, 77.60, 77.70, 77.80, 77.89, 77.99, 78.13, 78.22, 78.32, 78.42, 78.51, 78.61, 78.70, 78.80, 78.89, 78.99, 79.09, 79.18, 79.28, 79.37, 79.47, 79.56, 79.66, 79.76, 79.85, 79.95, 80.04, 80.14, 80.23, 80.33, 80.43, 80.52, 80.62, 80.72, 80.81, 80.91, 81.00, 81.10, 81.24, 81.33, 81.43, 81.52, 81.62, 81.72, 81.81, 81.91, 82.01, 82.10, 82.19, 82.29, 82.39, 82.48, 82.58, 82.68, 82.77, 82.86, 82.96, 83.06, 83.15, 83.25, 83.35, 83.44, 83.54, 83.63, 83.73, 83.82, 83.92, 84.01, 84.11, 84.21, 84.35, 84.44, 84.54, 84.63, 84.73, 84.83, 84.92, 85.02, 85.11, 85.21, 85.31, 85.40, 85.50, 85.59, 85.69, 85.78, 85.88, 85.98, 86.07, 86.17, 86.26, 86.36, 86.46, 86.55, 86.65, 86.74, 86.84, 86.93, 87.03, 87.12, 87.22, 87.32, 87.46, 87.55, 87.65, 87.74, 87.84, 87.94, 88.03, 88.13, 88.22, 88.32, 88.41, 88.51, 88.61, 88.70, 88.80, 88.89, 88.99, 89.08, 89.18, 89.28, 89.37, 89.47, 89.56, 89.66, 89.76, 89.85, 89.95, 90.04, 90.14, 90.23, 90.33, 90.43, 90.57, 90.66, 90.76, 90.85, 90.95, 91.04, 91.14, 91.23, 91.33, 91.43, 91.52, 91.62, 91.72, 91.81, 91.90, 92.00, 92.10, 92.19, 92.29, 92.38, 92.48, 92.58, 92.67, 92.77, 92.86, 92.96, 93.06, 93.15, 93.25, 93.34, 93.44, 93.53, 93.67, 93.77, 93.87, 93.96, 94.06, 94.16, 94.25, 94.35, 94.44, 94.54, 94.63, 94.73, 94.82, 94.92, 95.01, 95.11, 95.21, 95.30, 95.40, 95.49, 95.58, 95.68, 95.78, 95.88, 95.97, 96.07, 96.16, 96.26, 96.36, 96.45, 96.55, 96.64, 96.78, 96.88, 96.98, 97.07, 97.17, 97.26, 97.36, 97.45, 97.55, 97.65, 97.74, 97.84, 97.93, 98.03, 98.12, 98.22, 98.32, 98.41, 98.51, 98.61, 98.70, 98.80, 98.89, 98.99, 99.08, 99.18, 99.27, 99.37, 99.47, 99.56, 99.66, 99.75
};
myMFC mfc1 = myMFC(19, 21, 70, 60, 80, 110, arr1);

double arr2[] = {0.31, 0.40, 0.50, 0.59, 0.69, 0.79, 0.89, 0.98, 1.08, 1.17, 1.27, 1.36, 1.46, 1.56, 1.65, 1.75, 1.84, 1.94, 2.04, 2.13, 2.23, 2.32, 2.42, 2.52, 2.61, 2.71, 2.80, 2.90, 2.99, 3.09, 3.19, 3.28, 3.42, 3.52, 3.61, 3.71, 3.81, 3.90, 4.00, 4.09, 4.19, 4.29, 4.38, 4.47, 4.57, 4.67, 4.77, 4.86, 4.96, 5.05, 5.15, 5.24, 5.34, 5.43, 5.53, 5.62, 5.73, 5.82, 5.92, 6.01, 6.10, 6.20, 6.30, 6.39, 6.53, 6.63, 6.73, 6.82, 6.92, 7.01, 7.11, 7.21, 7.30, 7.40, 7.50, 7.59, 7.69, 7.78, 7.88, 7.97, 8.07, 8.16, 8.26, 8.35, 8.46, 8.55, 8.64, 8.74, 8.83, 8.93, 9.03, 9.12, 9.22, 9.31, 9.41, 9.51, 9.65, 9.74, 9.84, 9.93, 10.03, 10.12, 10.23, 10.32, 10.41, 10.51, 10.60, 10.70, 10.80, 10.89, 10.99, 11.09, 11.18, 11.28, 11.37, 11.47, 11.56, 11.66, 11.75, 11.85, 11.94, 12.04, 12.14, 12.23, 12.33, 12.43, 12.52, 12.62, 12.76, 12.85, 12.95, 13.05, 13.14, 13.23, 13.33, 13.43, 13.53, 13.62, 13.72, 13.81, 13.91, 14.00, 14.10, 14.20, 14.29, 14.39, 14.48, 14.58, 14.68, 14.77, 14.86, 14.96, 15.05, 15.15, 15.25, 15.34, 15.44, 15.54, 15.63, 15.73, 15.87, 15.96, 16.06, 16.16, 16.25, 16.35, 16.44, 16.54, 16.63, 16.73, 16.83, 16.92, 17.02, 17.12, 17.21, 17.31, 17.40, 17.50, 17.59, 17.69, 17.79, 17.88, 17.98, 18.07, 18.17, 18.27, 18.36, 18.46, 18.55, 18.65, 18.74, 18.84, 18.98, 19.08, 19.17, 19.27, 19.36, 19.46, 19.56, 19.65, 19.75, 19.84, 19.94, 20.04, 20.13, 20.23, 20.32, 20.42, 20.51, 20.61, 20.70, 20.80, 20.90, 21.00, 21.09, 21.19, 21.28, 21.38, 21.47, 21.57, 21.66, 21.76, 21.86, 21.95, 22.09, 22.19, 22.29, 22.38, 22.48, 22.57, 22.67, 22.76, 22.86, 22.96, 23.05, 23.15, 23.24, 23.34, 23.44, 23.53, 23.63, 23.72, 23.82, 23.92, 24.01, 24.11, 24.20, 24.30, 24.39, 24.49, 24.58, 24.68, 24.78, 24.87, 24.97, 25.06, 25.20, 25.30, 25.40, 25.49, 25.59, 25.68, 25.78, 25.88, 25.97, 26.07, 26.17, 26.26, 26.36, 26.45, 26.55, 26.64, 26.74, 26.84, 26.93, 27.02, 27.12, 27.22, 27.32, 27.41, 27.51, 27.60, 27.70, 27.79, 27.89, 27.99, 28.08, 28.18, 28.32, 28.41, 28.51, 28.61, 28.70, 28.80, 28.89, 28.99, 29.08, 29.18, 29.28, 29.37, 29.47, 29.57, 29.66, 29.76, 29.85, 29.95, 30.05, 30.14, 30.24, 30.33, 30.43, 30.52, 30.62, 30.71, 30.81, 30.91, 31.00, 31.10, 31.19, 31.29, 31.43, 31.53, 31.62, 31.72, 31.82, 31.91, 32.01, 32.10, 32.20, 32.30, 32.39, 32.49, 32.58, 32.68, 32.77, 32.87, 32.97, 33.06, 33.16, 33.26, 33.35, 33.45, 33.54, 33.64, 33.73, 33.83, 33.92, 34.02, 34.11, 34.21, 34.31, 34.40, 34.55, 34.64, 34.74, 34.83, 34.93, 35.03, 35.12, 35.22, 35.31, 35.41, 35.50, 35.60, 35.70, 35.79, 35.89, 35.99, 36.08, 36.17, 36.27, 36.37, 36.46, 36.56, 36.65, 36.75, 36.85, 36.94, 37.03, 37.13, 37.23, 37.32, 37.42, 37.52, 37.66, 37.75, 37.85, 37.94, 38.04, 38.14, 38.23, 38.33, 38.43, 38.52, 38.62, 38.71, 38.81, 38.91, 39.00, 39.09, 39.19, 39.29, 39.39, 39.48, 39.57, 39.67, 39.77, 39.87, 39.96, 40.06, 40.15, 40.25, 40.34, 40.44, 40.54, 40.63, 40.77, 40.87, 40.96, 41.06, 41.16, 41.25, 41.35, 41.44, 41.54, 41.63, 41.73, 41.83, 41.92, 42.02, 42.12, 42.21, 42.31, 42.40, 42.50, 42.59, 42.69, 42.79, 42.88, 42.98, 43.07, 43.17, 43.27, 43.36, 43.45, 43.55, 43.65, 43.75, 43.88, 43.98, 44.08, 44.17, 44.27, 44.37, 44.46, 44.56, 44.65, 44.75, 44.85, 44.94, 45.04, 45.13, 45.23, 45.33, 45.42, 45.51, 45.61, 45.71, 45.81, 45.90, 45.99, 46.09, 46.19, 46.28, 46.38, 46.48, 46.57, 46.67, 46.76, 46.86, 47.00, 47.09, 47.19, 47.29, 47.39, 47.48, 47.58, 47.67, 47.77, 47.87, 47.96, 48.06, 48.16, 48.25, 48.34, 48.44, 48.54, 48.63, 48.73, 48.82, 48.92, 49.02, 49.11, 49.21, 49.31, 49.40, 49.50, 49.59, 49.69, 49.78, 49.88, 49.98, 50.12, 50.21, 50.31, 50.40, 50.50, 50.60, 50.70, 50.79, 50.89, 50.99, 51.08, 51.18, 51.27, 51.37, 51.46, 51.56, 51.66, 51.76, 51.85, 51.95, 52.04, 52.14, 52.24, 52.33, 52.43, 52.52, 52.62, 52.72, 52.81, 52.91, 53.01, 53.10, 53.24, 53.34, 53.43, 53.53, 53.62, 53.72, 53.82, 53.91, 54.01, 54.10, 54.20, 54.30, 54.39, 54.49, 54.58, 54.68, 54.77, 54.87, 54.97, 55.06, 55.16, 55.26, 55.35, 55.45, 55.54, 55.64, 55.73, 55.83, 55.92, 56.02, 56.12, 56.21, 56.35, 56.45, 56.55, 56.64, 56.74, 56.83, 56.93, 57.03, 57.12, 57.21, 57.31, 57.41, 57.50, 57.60, 57.70, 57.79, 57.89, 57.98, 58.08, 58.18, 58.27, 58.37, 58.46, 58.56, 58.65, 58.75, 58.84, 58.94, 59.04, 59.13, 59.23, 59.32, 59.46, 59.56, 59.66, 59.75, 59.85, 59.95, 60.04, 60.14, 60.23, 60.33, 60.42, 60.52, 60.62, 60.71, 60.81, 60.90, 61.00, 61.10, 61.19, 61.28, 61.38, 61.48, 61.57, 61.67, 61.76, 61.86, 61.96, 62.05, 62.15, 62.24, 62.34, 62.44, 62.58, 62.67, 62.77, 62.86, 62.96, 63.05, 63.15, 63.25, 63.34, 63.44, 63.54, 63.63, 63.73, 63.83, 63.92, 64.02, 64.11, 64.21, 64.30, 64.40, 64.49, 64.59, 64.68, 64.78, 64.88, 64.97, 65.07, 65.16, 65.26, 65.35, 65.45, 65.55, 65.69, 65.78, 65.88, 65.98, 66.07, 66.17, 66.26, 66.36, 66.45, 66.55, 66.65, 66.74, 66.84, 66.93, 67.03, 67.13, 67.22, 67.32, 67.42, 67.51, 67.60, 67.70, 67.80, 67.89, 67.99, 68.08, 68.18, 68.27, 68.37, 68.46, 68.56, 68.66, 68.80, 68.89, 68.99, 69.09, 69.18, 69.28, 69.37, 69.47, 69.57, 69.66, 69.76, 69.86, 69.95, 70.05, 70.14, 70.23, 70.33, 70.43, 70.52, 70.62, 70.71, 70.81, 70.91, 71.00, 71.09, 71.19, 71.29, 71.38, 71.48, 71.58, 71.67, 71.77, 71.91, 72.00, 72.10, 72.20, 72.29, 72.39, 72.49, 72.58, 72.67, 72.77, 72.87, 72.96, 73.06, 73.15, 73.25, 73.35, 73.44, 73.54, 73.63, 73.73, 73.82, 73.92, 74.02, 74.11, 74.21, 74.30, 74.40, 74.49, 74.59, 74.69, 74.78, 74.88, 75.02, 75.12, 75.21, 75.31, 75.40, 75.50, 75.59, 75.69, 75.78, 75.88, 75.98, 76.08, 76.17, 76.27, 76.36, 76.45, 76.55, 76.65, 76.74, 76.84, 76.93, 77.03, 77.13, 77.22, 77.32, 77.41, 77.51, 77.60, 77.70, 77.80, 77.89, 77.99, 78.13, 78.23, 78.32, 78.42, 78.51, 78.61, 78.70, 78.80, 78.89, 78.99, 79.09, 79.18, 79.28, 79.37, 79.47, 79.57, 79.66, 79.76, 79.85, 79.95, 80.05, 80.14, 80.24, 80.33, 80.42, 80.52, 80.62, 80.71, 80.81, 80.91, 81.00, 81.10, 81.24, 81.33, 81.43, 81.53, 81.62, 81.72, 81.81, 81.91, 82.01, 82.10, 82.19, 82.29, 82.39, 82.48, 82.58, 82.67, 82.77, 82.87, 82.96, 83.06, 83.15, 83.25, 83.35, 83.44, 83.54, 83.63, 83.73, 83.82, 83.92, 84.02, 84.11, 84.21, 84.35, 84.44, 84.54, 84.64, 84.73, 84.82, 84.92, 85.02, 85.12, 85.21, 85.31, 85.40, 85.50, 85.59, 85.69, 85.79, 85.88, 85.98, 86.07, 86.17, 86.26, 86.36, 86.46, 86.55, 86.65, 86.74, 86.84, 86.93, 87.03, 87.13, 87.22, 87.32, 87.46, 87.55, 87.65, 87.75, 87.84, 87.94, 88.03, 88.13, 88.22, 88.32, 88.42, 88.51, 88.61, 88.70, 88.80, 88.89, 88.99, 89.08, 89.18, 89.28, 89.37, 89.47, 89.56, 89.66, 89.76, 89.85, 89.95, 90.04, 90.14, 90.23, 90.33, 90.43, 90.57, 90.66, 90.76, 90.85, 90.95, 91.04, 91.14, 91.24, 91.33, 91.43, 91.52, 91.62, 91.72, 91.81, 91.91, 92.00, 92.10, 92.19, 92.29, 92.39, 92.48, 92.58, 92.67, 92.77, 92.86, 92.96, 93.05, 93.15, 93.25, 93.34, 93.44, 93.53, 93.68, 93.77, 93.87, 93.96, 94.06, 94.15, 94.25, 94.35, 94.44, 94.54, 94.64, 94.73, 94.82, 94.92, 95.02, 95.11, 95.21, 95.30, 95.40, 95.49, 95.59, 95.69, 95.78, 95.88, 95.97, 96.07, 96.16, 96.26, 96.36, 96.45, 96.55, 96.64, 96.79, 96.88, 96.98, 97.07, 97.17, 97.26, 97.36, 97.46, 97.55, 97.65, 97.74, 97.84, 97.93, 98.03, 98.13, 98.22, 98.32, 98.42, 98.51, 98.61, 98.70, 98.80, 98.90, 98.99, 99.09, 99.18, 99.28, 99.37, 99.47, 99.56, 99.66, 99.76
};
myMFC mfc2 = myMFC(20, 47, 230, 60, 240, 110, arr2);

double arr3[] = {0.31, 0.40, 0.50, 0.60, 0.69, 0.79, 0.88, 0.98, 1.08, 1.17, 1.27, 1.36, 1.46, 1.55, 1.65, 1.75, 1.84, 1.94, 2.03, 2.13, 2.23, 2.32, 2.42, 2.51, 2.61, 2.70, 2.80, 2.90, 2.99, 3.09, 3.19, 3.28, 3.42, 3.52, 3.61, 3.71, 3.80, 3.90, 4.00, 4.09, 4.19, 4.28, 4.38, 4.48, 4.57, 4.67, 4.76, 4.86, 4.95, 5.05, 5.15, 5.24, 5.34, 5.44, 5.53, 5.63, 5.72, 5.82, 5.91, 6.01, 6.11, 6.20, 6.30, 6.39, 6.53, 6.63, 6.73, 6.82, 6.92, 7.01, 7.11, 7.21, 7.30, 7.40, 7.49, 7.59, 7.68, 7.78, 7.88, 7.97, 8.07, 8.16, 8.26, 8.36, 8.45, 8.55, 8.64, 8.74, 8.83, 8.93, 9.02, 9.12, 9.21, 9.31, 9.41, 9.51, 9.64, 9.74, 9.83, 9.93, 10.03, 10.13, 10.22, 10.32, 10.41, 10.51, 10.61, 10.70, 10.80, 10.89, 10.99, 11.08, 11.18, 11.27, 11.37, 11.47, 11.56, 11.66, 11.75, 11.85, 11.95, 12.04, 12.14, 12.23, 12.33, 12.42, 12.52, 12.62, 12.75, 12.85, 12.95, 13.04, 13.14, 13.23, 13.33, 13.43, 13.52, 13.62, 13.72, 13.81, 13.91, 14.00, 14.10, 14.19, 14.29, 14.39, 14.48, 14.58, 14.67, 14.77, 14.86, 14.96, 15.06, 15.15, 15.25, 15.34, 15.44, 15.54, 15.63, 15.73, 15.87, 15.96, 16.06, 16.15, 16.25, 16.35, 16.44, 16.54, 16.63, 16.73, 16.83, 16.92, 17.02, 17.12, 17.21, 17.31, 17.40, 17.50, 17.59, 17.69, 17.79, 17.88, 17.98, 18.07, 18.17, 18.26, 18.36, 18.46, 18.55, 18.65, 18.74, 18.84, 18.98, 19.08, 19.17, 19.27, 19.36, 19.46, 19.56, 19.65, 19.75, 19.84, 19.94, 20.04, 20.13, 20.23, 20.32, 20.42, 20.51, 20.61, 20.71, 20.80, 20.90, 20.99, 21.09, 21.18, 21.28, 21.38, 21.47, 21.57, 21.66, 21.76, 21.86, 21.95, 22.09, 22.19, 22.28, 22.38, 22.48, 22.57, 22.67, 22.76, 22.86, 22.96, 23.05, 23.15, 23.24, 23.34, 23.43, 23.53, 23.63, 23.72, 23.82, 23.92, 24.01, 24.11, 24.20, 24.30, 24.39, 24.49, 24.58, 24.68, 24.78, 24.87, 24.97, 25.06, 25.20, 25.30, 25.40, 25.49, 25.59, 25.68, 25.78, 25.88, 25.97, 26.07, 26.16, 26.26, 26.35, 26.45, 26.55, 26.64, 26.74, 26.83, 26.93, 27.03, 27.12, 27.22, 27.31, 27.41, 27.51, 27.60, 27.70, 27.79, 27.89, 27.99, 28.08, 28.18, 28.32, 28.41, 28.51, 28.61, 28.70, 28.80, 28.89, 28.99, 29.09, 29.18, 29.28, 29.37, 29.47, 29.57, 29.66, 29.76, 29.85, 29.95, 30.04, 30.14, 30.24, 30.33, 30.43, 30.52, 30.62, 30.72, 30.81, 30.91, 31.00, 31.10, 31.19, 31.29, 31.43, 31.53, 31.62, 31.72, 31.82, 31.91, 32.01, 32.10, 32.20, 32.29, 32.39, 32.49, 32.58, 32.68, 32.78, 32.87, 32.96, 33.06, 33.16, 33.25, 33.35, 33.44, 33.54, 33.64, 33.73, 33.83, 33.92, 34.02, 34.12, 34.21, 34.31, 34.40, 34.54, 34.64, 34.73, 34.83, 34.93, 35.02, 35.12, 35.22, 35.31, 35.41, 35.50, 35.60, 35.70, 35.79, 35.89, 35.98, 36.08, 36.18, 36.27, 36.37, 36.46, 36.56, 36.65, 36.75, 36.84, 36.94, 37.04, 37.13, 37.23, 37.32, 37.42, 37.52, 37.66, 37.75, 37.85, 37.94, 38.04, 38.14, 38.23, 38.33, 38.42, 38.52, 38.62, 38.71, 38.81, 38.90, 39.00, 39.10, 39.19, 39.29, 39.38, 39.48, 39.58, 39.67, 39.77, 39.86, 39.96, 40.06, 40.15, 40.25, 40.34, 40.44, 40.53, 40.63, 40.77, 40.87, 40.96, 41.06, 41.15, 41.25, 41.35, 41.44, 41.54, 41.63, 41.73, 41.82, 41.92, 42.02, 42.12, 42.21, 42.31, 42.40, 42.50, 42.59, 42.69, 42.78, 42.88, 42.98, 43.07, 43.17, 43.26, 43.36, 43.46, 43.55, 43.65, 43.74, 43.88, 43.98, 44.08, 44.17, 44.27, 44.36, 44.46, 44.56, 44.65, 44.75, 44.84, 44.94, 45.04, 45.13, 45.23, 45.32, 45.42, 45.52, 45.61, 45.71, 45.81, 45.90, 45.99, 46.09, 46.19, 46.28, 46.38, 46.48, 46.57, 46.67, 46.77, 46.86, 47.00, 47.09, 47.19, 47.29, 47.38, 47.48, 47.58, 47.67, 47.77, 47.86, 47.96, 48.06, 48.15, 48.25, 48.34, 48.44, 48.54, 48.63, 48.73, 48.83, 48.92, 49.02, 49.11, 49.21, 49.30, 49.40, 49.50, 49.59, 49.69, 49.78, 49.88, 49.98, 50.12, 50.21, 50.31, 50.40, 50.50, 50.60, 50.69, 50.79, 50.89, 50.98, 51.08, 51.17, 51.27, 51.37, 51.46, 51.56, 51.66, 51.75, 51.85, 51.95, 52.04, 52.14, 52.23, 52.33, 52.43, 52.52, 52.62, 52.71, 52.81, 52.91, 53.00, 53.10, 53.24, 53.34, 53.43, 53.53, 53.62, 53.72, 53.82, 53.91, 54.01, 54.10, 54.20, 54.29, 54.39, 54.49, 54.58, 54.68, 54.77, 54.87, 54.97, 55.06, 55.16, 55.25, 55.35, 55.45, 55.54, 55.64, 55.73, 55.83, 55.92, 56.02, 56.11, 56.21, 56.35, 56.45, 56.54, 56.64, 56.73, 56.83, 56.93, 57.02, 57.12, 57.21, 57.31, 57.41, 57.50, 57.60, 57.70, 57.79, 57.89, 57.98, 58.08, 58.17, 58.27, 58.37, 58.46, 58.56, 58.65, 58.75, 58.84, 58.94, 59.04, 59.13, 59.23, 59.32, 59.46, 59.56, 59.65, 59.75, 59.85, 59.94, 60.04, 60.13, 60.23, 60.32, 60.42, 60.52, 60.62, 60.71, 60.81, 60.90, 61.00, 61.09, 61.19, 61.28, 61.38, 61.48, 61.57, 61.67, 61.76, 61.86, 61.96, 62.05, 62.15, 62.24, 62.34, 62.44, 62.57, 62.67, 62.77, 62.86, 62.96, 63.06, 63.15, 63.25, 63.34, 63.44, 63.53, 63.63, 63.73, 63.82, 63.92, 64.01, 64.11, 64.20, 64.30, 64.40, 64.49, 64.59, 64.68, 64.78, 64.88, 64.97, 65.07, 65.16, 65.26, 65.35, 65.45, 65.55, 65.69, 65.78, 65.88, 65.97, 66.07, 66.17, 66.26, 66.36, 66.45, 66.55, 66.64, 66.74, 66.84, 66.93, 67.03, 67.12, 67.22, 67.31, 67.41, 67.51, 67.60, 67.70, 67.79, 67.89, 67.99, 68.08, 68.18, 68.27, 68.37, 68.47, 68.56, 68.66, 68.80, 68.89, 68.99, 69.09, 69.18, 69.28, 69.37, 69.47, 69.56, 69.66, 69.75, 69.85, 69.95, 70.04, 70.14, 70.24, 70.33, 70.43, 70.52, 70.62, 70.71, 70.81, 70.91, 71.00, 71.09, 71.19, 71.29, 71.38, 71.48, 71.57, 71.67, 71.77, 71.91, 72.00, 72.10, 72.20, 72.29, 72.39, 72.48, 72.58, 72.67, 72.77, 72.87, 72.96, 73.06, 73.15, 73.25, 73.35, 73.44, 73.54, 73.63, 73.73, 73.82, 73.92, 74.02, 74.11, 74.21, 74.30, 74.40, 74.49, 74.59, 74.69, 74.78, 74.88, 75.02, 75.11, 75.21, 75.31, 75.40, 75.50, 75.59, 75.69, 75.79, 75.88, 75.98, 76.07, 76.17, 76.26, 76.36, 76.45, 76.55, 76.65, 76.74, 76.84, 76.93, 77.03, 77.13, 77.22, 77.32, 77.41, 77.51, 77.60, 77.70, 77.80, 77.89, 77.99, 78.13, 78.22, 78.32, 78.42, 78.51, 78.61, 78.70, 78.80, 78.89, 78.99, 79.09, 79.18, 79.28, 79.37, 79.47, 79.56, 79.66, 79.76, 79.85, 79.95, 80.04, 80.14, 80.23, 80.33, 80.43, 80.52, 80.62, 80.72, 80.81, 80.91, 81.00, 81.10, 81.24, 81.33, 81.43, 81.52, 81.62, 81.72, 81.81, 81.91, 82.01, 82.10, 82.19, 82.29, 82.39, 82.48, 82.58, 82.68, 82.77, 82.86, 82.96, 83.06, 83.15, 83.25, 83.35, 83.44, 83.54, 83.63, 83.73, 83.82, 83.92, 84.01, 84.11, 84.21, 84.35, 84.44, 84.54, 84.63, 84.73, 84.83, 84.92, 85.02, 85.11, 85.21, 85.31, 85.40, 85.50, 85.59, 85.69, 85.78, 85.88, 85.98, 86.07, 86.17, 86.26, 86.36, 86.46, 86.55, 86.65, 86.74, 86.84, 86.93, 87.03, 87.12, 87.22, 87.32, 87.46, 87.55, 87.65, 87.74, 87.84, 87.94, 88.03, 88.13, 88.22, 88.32, 88.41, 88.51, 88.61, 88.70, 88.80, 88.89, 88.99, 89.08, 89.18, 89.28, 89.37, 89.47, 89.56, 89.66, 89.76, 89.85, 89.95, 90.04, 90.14, 90.23, 90.33, 90.43, 90.57, 90.66, 90.76, 90.85, 90.95, 91.04, 91.14, 91.23, 91.33, 91.43, 91.52, 91.62, 91.72, 91.81, 91.90, 92.00, 92.10, 92.19, 92.29, 92.38, 92.48, 92.58, 92.67, 92.77, 92.86, 92.96, 93.06, 93.15, 93.25, 93.34, 93.44, 93.53, 93.67, 93.77, 93.87, 93.96, 94.06, 94.16, 94.25, 94.35, 94.44, 94.54, 94.63, 94.73, 94.82, 94.92, 95.01, 95.11, 95.21, 95.30, 95.40, 95.49, 95.58, 95.68, 95.78, 95.88, 95.97, 96.07, 96.16, 96.26, 96.36, 96.45, 96.55, 96.64, 96.78, 96.88, 96.98, 97.07, 97.17, 97.26, 97.36, 97.45, 97.55, 97.65, 97.74, 97.84, 97.93, 98.03, 98.12, 98.22, 98.32, 98.41, 98.51, 98.61, 98.70, 98.80, 98.89, 98.99, 99.08, 99.18, 99.27, 99.37, 99.47, 99.56, 99.66, 99.75
};
myMFC mfc3 = myMFC(0, 36, 70, 220, 80, 270, arr3);

double arr4[] = {0.31, 0.40, 0.50, 0.60, 0.69, 0.79, 0.88, 0.98, 1.08, 1.17, 1.27, 1.36, 1.46, 1.55, 1.65, 1.75, 1.84, 1.94, 2.03, 2.13, 2.23, 2.32, 2.42, 2.51, 2.61, 2.70, 2.80, 2.90, 2.99, 3.09, 3.19, 3.28, 3.42, 3.52, 3.61, 3.71, 3.80, 3.90, 4.00, 4.09, 4.19, 4.28, 4.38, 4.48, 4.57, 4.67, 4.76, 4.86, 4.95, 5.05, 5.15, 5.24, 5.34, 5.44, 5.53, 5.63, 5.72, 5.82, 5.91, 6.01, 6.11, 6.20, 6.30, 6.39, 6.53, 6.63, 6.73, 6.82, 6.92, 7.01, 7.11, 7.21, 7.30, 7.40, 7.49, 7.59, 7.68, 7.78, 7.88, 7.97, 8.07, 8.16, 8.26, 8.36, 8.45, 8.55, 8.64, 8.74, 8.83, 8.93, 9.02, 9.12, 9.21, 9.31, 9.41, 9.51, 9.64, 9.74, 9.83, 9.93, 10.03, 10.13, 10.22, 10.32, 10.41, 10.51, 10.61, 10.70, 10.80, 10.89, 10.99, 11.08, 11.18, 11.27, 11.37, 11.47, 11.56, 11.66, 11.75, 11.85, 11.95, 12.04, 12.14, 12.23, 12.33, 12.42, 12.52, 12.62, 12.75, 12.85, 12.95, 13.04, 13.14, 13.23, 13.33, 13.43, 13.52, 13.62, 13.72, 13.81, 13.91, 14.00, 14.10, 14.19, 14.29, 14.39, 14.48, 14.58, 14.67, 14.77, 14.86, 14.96, 15.06, 15.15, 15.25, 15.34, 15.44, 15.54, 15.63, 15.73, 15.87, 15.96, 16.06, 16.15, 16.25, 16.35, 16.44, 16.54, 16.63, 16.73, 16.83, 16.92, 17.02, 17.12, 17.21, 17.31, 17.40, 17.50, 17.59, 17.69, 17.79, 17.88, 17.98, 18.07, 18.17, 18.26, 18.36, 18.46, 18.55, 18.65, 18.74, 18.84, 18.98, 19.08, 19.17, 19.27, 19.36, 19.46, 19.56, 19.65, 19.75, 19.84, 19.94, 20.04, 20.13, 20.23, 20.32, 20.42, 20.51, 20.61, 20.71, 20.80, 20.90, 20.99, 21.09, 21.18, 21.28, 21.38, 21.47, 21.57, 21.66, 21.76, 21.86, 21.95, 22.09, 22.19, 22.28, 22.38, 22.48, 22.57, 22.67, 22.76, 22.86, 22.96, 23.05, 23.15, 23.24, 23.34, 23.43, 23.53, 23.63, 23.72, 23.82, 23.92, 24.01, 24.11, 24.20, 24.30, 24.39, 24.49, 24.58, 24.68, 24.78, 24.87, 24.97, 25.06, 25.20, 25.30, 25.40, 25.49, 25.59, 25.68, 25.78, 25.88, 25.97, 26.07, 26.16, 26.26, 26.35, 26.45, 26.55, 26.64, 26.74, 26.83, 26.93, 27.03, 27.12, 27.22, 27.31, 27.41, 27.51, 27.60, 27.70, 27.79, 27.89, 27.99, 28.08, 28.18, 28.32, 28.41, 28.51, 28.61, 28.70, 28.80, 28.89, 28.99, 29.09, 29.18, 29.28, 29.37, 29.47, 29.57, 29.66, 29.76, 29.85, 29.95, 30.04, 30.14, 30.24, 30.33, 30.43, 30.52, 30.62, 30.72, 30.81, 30.91, 31.00, 31.10, 31.19, 31.29, 31.43, 31.53, 31.62, 31.72, 31.82, 31.91, 32.01, 32.10, 32.20, 32.29, 32.39, 32.49, 32.58, 32.68, 32.78, 32.87, 32.96, 33.06, 33.16, 33.25, 33.35, 33.44, 33.54, 33.64, 33.73, 33.83, 33.92, 34.02, 34.12, 34.21, 34.31, 34.40, 34.54, 34.64, 34.73, 34.83, 34.93, 35.02, 35.12, 35.22, 35.31, 35.41, 35.50, 35.60, 35.70, 35.79, 35.89, 35.98, 36.08, 36.18, 36.27, 36.37, 36.46, 36.56, 36.65, 36.75, 36.84, 36.94, 37.04, 37.13, 37.23, 37.32, 37.42, 37.52, 37.66, 37.75, 37.85, 37.94, 38.04, 38.14, 38.23, 38.33, 38.42, 38.52, 38.62, 38.71, 38.81, 38.90, 39.00, 39.10, 39.19, 39.29, 39.38, 39.48, 39.58, 39.67, 39.77, 39.86, 39.96, 40.06, 40.15, 40.25, 40.34, 40.44, 40.53, 40.63, 40.77, 40.87, 40.96, 41.06, 41.15, 41.25, 41.35, 41.44, 41.54, 41.63, 41.73, 41.82, 41.92, 42.02, 42.12, 42.21, 42.31, 42.40, 42.50, 42.59, 42.69, 42.78, 42.88, 42.98, 43.07, 43.17, 43.26, 43.36, 43.46, 43.55, 43.65, 43.74, 43.88, 43.98, 44.08, 44.17, 44.27, 44.36, 44.46, 44.56, 44.65, 44.75, 44.84, 44.94, 45.04, 45.13, 45.23, 45.32, 45.42, 45.52, 45.61, 45.71, 45.81, 45.90, 45.99, 46.09, 46.19, 46.28, 46.38, 46.48, 46.57, 46.67, 46.77, 46.86, 47.00, 47.09, 47.19, 47.29, 47.38, 47.48, 47.58, 47.67, 47.77, 47.86, 47.96, 48.06, 48.15, 48.25, 48.34, 48.44, 48.54, 48.63, 48.73, 48.83, 48.92, 49.02, 49.11, 49.21, 49.30, 49.40, 49.50, 49.59, 49.69, 49.78, 49.88, 49.98, 50.12, 50.21, 50.31, 50.40, 50.50, 50.60, 50.69, 50.79, 50.89, 50.98, 51.08, 51.17, 51.27, 51.37, 51.46, 51.56, 51.66, 51.75, 51.85, 51.95, 52.04, 52.14, 52.23, 52.33, 52.43, 52.52, 52.62, 52.71, 52.81, 52.91, 53.00, 53.10, 53.24, 53.34, 53.43, 53.53, 53.62, 53.72, 53.82, 53.91, 54.01, 54.10, 54.20, 54.29, 54.39, 54.49, 54.58, 54.68, 54.77, 54.87, 54.97, 55.06, 55.16, 55.25, 55.35, 55.45, 55.54, 55.64, 55.73, 55.83, 55.92, 56.02, 56.11, 56.21, 56.35, 56.45, 56.54, 56.64, 56.73, 56.83, 56.93, 57.02, 57.12, 57.21, 57.31, 57.41, 57.50, 57.60, 57.70, 57.79, 57.89, 57.98, 58.08, 58.17, 58.27, 58.37, 58.46, 58.56, 58.65, 58.75, 58.84, 58.94, 59.04, 59.13, 59.23, 59.32, 59.46, 59.56, 59.65, 59.75, 59.85, 59.94, 60.04, 60.13, 60.23, 60.32, 60.42, 60.52, 60.62, 60.71, 60.81, 60.90, 61.00, 61.09, 61.19, 61.28, 61.38, 61.48, 61.57, 61.67, 61.76, 61.86, 61.96, 62.05, 62.15, 62.24, 62.34, 62.44, 62.57, 62.67, 62.77, 62.86, 62.96, 63.06, 63.15, 63.25, 63.34, 63.44, 63.53, 63.63, 63.73, 63.82, 63.92, 64.01, 64.11, 64.20, 64.30, 64.40, 64.49, 64.59, 64.68, 64.78, 64.88, 64.97, 65.07, 65.16, 65.26, 65.35, 65.45, 65.55, 65.69, 65.78, 65.88, 65.97, 66.07, 66.17, 66.26, 66.36, 66.45, 66.55, 66.64, 66.74, 66.84, 66.93, 67.03, 67.12, 67.22, 67.31, 67.41, 67.51, 67.60, 67.70, 67.79, 67.89, 67.99, 68.08, 68.18, 68.27, 68.37, 68.47, 68.56, 68.66, 68.80, 68.89, 68.99, 69.09, 69.18, 69.28, 69.37, 69.47, 69.56, 69.66, 69.75, 69.85, 69.95, 70.04, 70.14, 70.24, 70.33, 70.43, 70.52, 70.62, 70.71, 70.81, 70.91, 71.00, 71.09, 71.19, 71.29, 71.38, 71.48, 71.57, 71.67, 71.77, 71.91, 72.00, 72.10, 72.20, 72.29, 72.39, 72.48, 72.58, 72.67, 72.77, 72.87, 72.96, 73.06, 73.15, 73.25, 73.35, 73.44, 73.54, 73.63, 73.73, 73.82, 73.92, 74.02, 74.11, 74.21, 74.30, 74.40, 74.49, 74.59, 74.69, 74.78, 74.88, 75.02, 75.11, 75.21, 75.31, 75.40, 75.50, 75.59, 75.69, 75.79, 75.88, 75.98, 76.07, 76.17, 76.26, 76.36, 76.45, 76.55, 76.65, 76.74, 76.84, 76.93, 77.03, 77.13, 77.22, 77.32, 77.41, 77.51, 77.60, 77.70, 77.80, 77.89, 77.99, 78.13, 78.22, 78.32, 78.42, 78.51, 78.61, 78.70, 78.80, 78.89, 78.99, 79.09, 79.18, 79.28, 79.37, 79.47, 79.56, 79.66, 79.76, 79.85, 79.95, 80.04, 80.14, 80.23, 80.33, 80.43, 80.52, 80.62, 80.72, 80.81, 80.91, 81.00, 81.10, 81.24, 81.33, 81.43, 81.52, 81.62, 81.72, 81.81, 81.91, 82.01, 82.10, 82.19, 82.29, 82.39, 82.48, 82.58, 82.68, 82.77, 82.86, 82.96, 83.06, 83.15, 83.25, 83.35, 83.44, 83.54, 83.63, 83.73, 83.82, 83.92, 84.01, 84.11, 84.21, 84.35, 84.44, 84.54, 84.63, 84.73, 84.83, 84.92, 85.02, 85.11, 85.21, 85.31, 85.40, 85.50, 85.59, 85.69, 85.78, 85.88, 85.98, 86.07, 86.17, 86.26, 86.36, 86.46, 86.55, 86.65, 86.74, 86.84, 86.93, 87.03, 87.12, 87.22, 87.32, 87.46, 87.55, 87.65, 87.74, 87.84, 87.94, 88.03, 88.13, 88.22, 88.32, 88.41, 88.51, 88.61, 88.70, 88.80, 88.89, 88.99, 89.08, 89.18, 89.28, 89.37, 89.47, 89.56, 89.66, 89.76, 89.85, 89.95, 90.04, 90.14, 90.23, 90.33, 90.43, 90.57, 90.66, 90.76, 90.85, 90.95, 91.04, 91.14, 91.23, 91.33, 91.43, 91.52, 91.62, 91.72, 91.81, 91.90, 92.00, 92.10, 92.19, 92.29, 92.38, 92.48, 92.58, 92.67, 92.77, 92.86, 92.96, 93.06, 93.15, 93.25, 93.34, 93.44, 93.53, 93.67, 93.77, 93.87, 93.96, 94.06, 94.16, 94.25, 94.35, 94.44, 94.54, 94.63, 94.73, 94.82, 94.92, 95.01, 95.11, 95.21, 95.30, 95.40, 95.49, 95.58, 95.68, 95.78, 95.88, 95.97, 96.07, 96.16, 96.26, 96.36, 96.45, 96.55, 96.64, 96.78, 96.88, 96.98, 97.07, 97.17, 97.26, 97.36, 97.45, 97.55, 97.65, 97.74, 97.84, 97.93, 98.03, 98.12, 98.22, 98.32, 98.41, 98.51, 98.61, 98.70, 98.80, 98.89, 98.99, 99.08, 99.18, 99.27, 99.37, 99.47, 99.56, 99.66, 99.75
};
myMFC mfc4 = myMFC(35, 37, 230, 220, 240, 270, arr4);

double arr5[] = {0.31, 0.40, 0.50, 0.60, 0.69, 0.79, 0.88, 0.98, 1.08, 1.17, 1.27, 1.36, 1.46, 1.55, 1.65, 1.75, 1.84, 1.94, 2.03, 2.13, 2.23, 2.32, 2.42, 2.51, 2.61, 2.70, 2.80, 2.90, 2.99, 3.09, 3.19, 3.28, 3.42, 3.52, 3.61, 3.71, 3.80, 3.90, 4.00, 4.09, 4.19, 4.28, 4.38, 4.48, 4.57, 4.67, 4.76, 4.86, 4.95, 5.05, 5.15, 5.24, 5.34, 5.44, 5.53, 5.63, 5.72, 5.82, 5.91, 6.01, 6.11, 6.20, 6.30, 6.39, 6.53, 6.63, 6.73, 6.82, 6.92, 7.01, 7.11, 7.21, 7.30, 7.40, 7.49, 7.59, 7.68, 7.78, 7.88, 7.97, 8.07, 8.16, 8.26, 8.36, 8.45, 8.55, 8.64, 8.74, 8.83, 8.93, 9.02, 9.12, 9.21, 9.31, 9.41, 9.51, 9.64, 9.74, 9.83, 9.93, 10.03, 10.13, 10.22, 10.32, 10.41, 10.51, 10.61, 10.70, 10.80, 10.89, 10.99, 11.08, 11.18, 11.27, 11.37, 11.47, 11.56, 11.66, 11.75, 11.85, 11.95, 12.04, 12.14, 12.23, 12.33, 12.42, 12.52, 12.62, 12.75, 12.85, 12.95, 13.04, 13.14, 13.23, 13.33, 13.43, 13.52, 13.62, 13.72, 13.81, 13.91, 14.00, 14.10, 14.19, 14.29, 14.39, 14.48, 14.58, 14.67, 14.77, 14.86, 14.96, 15.06, 15.15, 15.25, 15.34, 15.44, 15.54, 15.63, 15.73, 15.87, 15.96, 16.06, 16.15, 16.25, 16.35, 16.44, 16.54, 16.63, 16.73, 16.83, 16.92, 17.02, 17.12, 17.21, 17.31, 17.40, 17.50, 17.59, 17.69, 17.79, 17.88, 17.98, 18.07, 18.17, 18.26, 18.36, 18.46, 18.55, 18.65, 18.74, 18.84, 18.98, 19.08, 19.17, 19.27, 19.36, 19.46, 19.56, 19.65, 19.75, 19.84, 19.94, 20.04, 20.13, 20.23, 20.32, 20.42, 20.51, 20.61, 20.71, 20.80, 20.90, 20.99, 21.09, 21.18, 21.28, 21.38, 21.47, 21.57, 21.66, 21.76, 21.86, 21.95, 22.09, 22.19, 22.28, 22.38, 22.48, 22.57, 22.67, 22.76, 22.86, 22.96, 23.05, 23.15, 23.24, 23.34, 23.43, 23.53, 23.63, 23.72, 23.82, 23.92, 24.01, 24.11, 24.20, 24.30, 24.39, 24.49, 24.58, 24.68, 24.78, 24.87, 24.97, 25.06, 25.20, 25.30, 25.40, 25.49, 25.59, 25.68, 25.78, 25.88, 25.97, 26.07, 26.16, 26.26, 26.35, 26.45, 26.55, 26.64, 26.74, 26.83, 26.93, 27.03, 27.12, 27.22, 27.31, 27.41, 27.51, 27.60, 27.70, 27.79, 27.89, 27.99, 28.08, 28.18, 28.32, 28.41, 28.51, 28.61, 28.70, 28.80, 28.89, 28.99, 29.09, 29.18, 29.28, 29.37, 29.47, 29.57, 29.66, 29.76, 29.85, 29.95, 30.04, 30.14, 30.24, 30.33, 30.43, 30.52, 30.62, 30.72, 30.81, 30.91, 31.00, 31.10, 31.19, 31.29, 31.43, 31.53, 31.62, 31.72, 31.82, 31.91, 32.01, 32.10, 32.20, 32.29, 32.39, 32.49, 32.58, 32.68, 32.78, 32.87, 32.96, 33.06, 33.16, 33.25, 33.35, 33.44, 33.54, 33.64, 33.73, 33.83, 33.92, 34.02, 34.12, 34.21, 34.31, 34.40, 34.54, 34.64, 34.73, 34.83, 34.93, 35.02, 35.12, 35.22, 35.31, 35.41, 35.50, 35.60, 35.70, 35.79, 35.89, 35.98, 36.08, 36.18, 36.27, 36.37, 36.46, 36.56, 36.65, 36.75, 36.84, 36.94, 37.04, 37.13, 37.23, 37.32, 37.42, 37.52, 37.66, 37.75, 37.85, 37.94, 38.04, 38.14, 38.23, 38.33, 38.42, 38.52, 38.62, 38.71, 38.81, 38.90, 39.00, 39.10, 39.19, 39.29, 39.38, 39.48, 39.58, 39.67, 39.77, 39.86, 39.96, 40.06, 40.15, 40.25, 40.34, 40.44, 40.53, 40.63, 40.77, 40.87, 40.96, 41.06, 41.15, 41.25, 41.35, 41.44, 41.54, 41.63, 41.73, 41.82, 41.92, 42.02, 42.12, 42.21, 42.31, 42.40, 42.50, 42.59, 42.69, 42.78, 42.88, 42.98, 43.07, 43.17, 43.26, 43.36, 43.46, 43.55, 43.65, 43.74, 43.88, 43.98, 44.08, 44.17, 44.27, 44.36, 44.46, 44.56, 44.65, 44.75, 44.84, 44.94, 45.04, 45.13, 45.23, 45.32, 45.42, 45.52, 45.61, 45.71, 45.81, 45.90, 45.99, 46.09, 46.19, 46.28, 46.38, 46.48, 46.57, 46.67, 46.77, 46.86, 47.00, 47.09, 47.19, 47.29, 47.38, 47.48, 47.58, 47.67, 47.77, 47.86, 47.96, 48.06, 48.15, 48.25, 48.34, 48.44, 48.54, 48.63, 48.73, 48.83, 48.92, 49.02, 49.11, 49.21, 49.30, 49.40, 49.50, 49.59, 49.69, 49.78, 49.88, 49.98, 50.12, 50.21, 50.31, 50.40, 50.50, 50.60, 50.69, 50.79, 50.89, 50.98, 51.08, 51.17, 51.27, 51.37, 51.46, 51.56, 51.66, 51.75, 51.85, 51.95, 52.04, 52.14, 52.23, 52.33, 52.43, 52.52, 52.62, 52.71, 52.81, 52.91, 53.00, 53.10, 53.24, 53.34, 53.43, 53.53, 53.62, 53.72, 53.82, 53.91, 54.01, 54.10, 54.20, 54.29, 54.39, 54.49, 54.58, 54.68, 54.77, 54.87, 54.97, 55.06, 55.16, 55.25, 55.35, 55.45, 55.54, 55.64, 55.73, 55.83, 55.92, 56.02, 56.11, 56.21, 56.35, 56.45, 56.54, 56.64, 56.73, 56.83, 56.93, 57.02, 57.12, 57.21, 57.31, 57.41, 57.50, 57.60, 57.70, 57.79, 57.89, 57.98, 58.08, 58.17, 58.27, 58.37, 58.46, 58.56, 58.65, 58.75, 58.84, 58.94, 59.04, 59.13, 59.23, 59.32, 59.46, 59.56, 59.65, 59.75, 59.85, 59.94, 60.04, 60.13, 60.23, 60.32, 60.42, 60.52, 60.62, 60.71, 60.81, 60.90, 61.00, 61.09, 61.19, 61.28, 61.38, 61.48, 61.57, 61.67, 61.76, 61.86, 61.96, 62.05, 62.15, 62.24, 62.34, 62.44, 62.57, 62.67, 62.77, 62.86, 62.96, 63.06, 63.15, 63.25, 63.34, 63.44, 63.53, 63.63, 63.73, 63.82, 63.92, 64.01, 64.11, 64.20, 64.30, 64.40, 64.49, 64.59, 64.68, 64.78, 64.88, 64.97, 65.07, 65.16, 65.26, 65.35, 65.45, 65.55, 65.69, 65.78, 65.88, 65.97, 66.07, 66.17, 66.26, 66.36, 66.45, 66.55, 66.64, 66.74, 66.84, 66.93, 67.03, 67.12, 67.22, 67.31, 67.41, 67.51, 67.60, 67.70, 67.79, 67.89, 67.99, 68.08, 68.18, 68.27, 68.37, 68.47, 68.56, 68.66, 68.80, 68.89, 68.99, 69.09, 69.18, 69.28, 69.37, 69.47, 69.56, 69.66, 69.75, 69.85, 69.95, 70.04, 70.14, 70.24, 70.33, 70.43, 70.52, 70.62, 70.71, 70.81, 70.91, 71.00, 71.09, 71.19, 71.29, 71.38, 71.48, 71.57, 71.67, 71.77, 71.91, 72.00, 72.10, 72.20, 72.29, 72.39, 72.48, 72.58, 72.67, 72.77, 72.87, 72.96, 73.06, 73.15, 73.25, 73.35, 73.44, 73.54, 73.63, 73.73, 73.82, 73.92, 74.02, 74.11, 74.21, 74.30, 74.40, 74.49, 74.59, 74.69, 74.78, 74.88, 75.02, 75.11, 75.21, 75.31, 75.40, 75.50, 75.59, 75.69, 75.79, 75.88, 75.98, 76.07, 76.17, 76.26, 76.36, 76.45, 76.55, 76.65, 76.74, 76.84, 76.93, 77.03, 77.13, 77.22, 77.32, 77.41, 77.51, 77.60, 77.70, 77.80, 77.89, 77.99, 78.13, 78.22, 78.32, 78.42, 78.51, 78.61, 78.70, 78.80, 78.89, 78.99, 79.09, 79.18, 79.28, 79.37, 79.47, 79.56, 79.66, 79.76, 79.85, 79.95, 80.04, 80.14, 80.23, 80.33, 80.43, 80.52, 80.62, 80.72, 80.81, 80.91, 81.00, 81.10, 81.24, 81.33, 81.43, 81.52, 81.62, 81.72, 81.81, 81.91, 82.01, 82.10, 82.19, 82.29, 82.39, 82.48, 82.58, 82.68, 82.77, 82.86, 82.96, 83.06, 83.15, 83.25, 83.35, 83.44, 83.54, 83.63, 83.73, 83.82, 83.92, 84.01, 84.11, 84.21, 84.35, 84.44, 84.54, 84.63, 84.73, 84.83, 84.92, 85.02, 85.11, 85.21, 85.31, 85.40, 85.50, 85.59, 85.69, 85.78, 85.88, 85.98, 86.07, 86.17, 86.26, 86.36, 86.46, 86.55, 86.65, 86.74, 86.84, 86.93, 87.03, 87.12, 87.22, 87.32, 87.46, 87.55, 87.65, 87.74, 87.84, 87.94, 88.03, 88.13, 88.22, 88.32, 88.41, 88.51, 88.61, 88.70, 88.80, 88.89, 88.99, 89.08, 89.18, 89.28, 89.37, 89.47, 89.56, 89.66, 89.76, 89.85, 89.95, 90.04, 90.14, 90.23, 90.33, 90.43, 90.57, 90.66, 90.76, 90.85, 90.95, 91.04, 91.14, 91.23, 91.33, 91.43, 91.52, 91.62, 91.72, 91.81, 91.90, 92.00, 92.10, 92.19, 92.29, 92.38, 92.48, 92.58, 92.67, 92.77, 92.86, 92.96, 93.06, 93.15, 93.25, 93.34, 93.44, 93.53, 93.67, 93.77, 93.87, 93.96, 94.06, 94.16, 94.25, 94.35, 94.44, 94.54, 94.63, 94.73, 94.82, 94.92, 95.01, 95.11, 95.21, 95.30, 95.40, 95.49, 95.58, 95.68, 95.78, 95.88, 95.97, 96.07, 96.16, 96.26, 96.36, 96.45, 96.55, 96.64, 96.78, 96.88, 96.98, 97.07, 97.17, 97.26, 97.36, 97.45, 97.55, 97.65, 97.74, 97.84, 97.93, 98.03, 98.12, 98.22, 98.32, 98.41, 98.51, 98.61, 98.70, 98.80, 98.89, 98.99, 99.08, 99.18, 99.27, 99.37, 99.47, 99.56, 99.66, 99.75
};
myMFC mfc5 = myMFC(40, 42, 70, 380, 80, 440, arr5);

double arr6[] = {0.31, 0.40, 0.50, 0.60, 0.69, 0.79, 0.88, 0.98, 1.08, 1.17, 1.27, 1.36, 1.46, 1.55, 1.65, 1.75, 1.84, 1.94, 2.03, 2.13, 2.23, 2.32, 2.42, 2.51, 2.61, 2.70, 2.80, 2.90, 2.99, 3.09, 3.19, 3.28, 3.42, 3.52, 3.61, 3.71, 3.80, 3.90, 4.00, 4.09, 4.19, 4.28, 4.38, 4.48, 4.57, 4.67, 4.76, 4.86, 4.95, 5.05, 5.15, 5.24, 5.34, 5.44, 5.53, 5.63, 5.72, 5.82, 5.91, 6.01, 6.11, 6.20, 6.30, 6.39, 6.53, 6.63, 6.73, 6.82, 6.92, 7.01, 7.11, 7.21, 7.30, 7.40, 7.49, 7.59, 7.68, 7.78, 7.88, 7.97, 8.07, 8.16, 8.26, 8.36, 8.45, 8.55, 8.64, 8.74, 8.83, 8.93, 9.02, 9.12, 9.21, 9.31, 9.41, 9.51, 9.64, 9.74, 9.83, 9.93, 10.03, 10.13, 10.22, 10.32, 10.41, 10.51, 10.61, 10.70, 10.80, 10.89, 10.99, 11.08, 11.18, 11.27, 11.37, 11.47, 11.56, 11.66, 11.75, 11.85, 11.95, 12.04, 12.14, 12.23, 12.33, 12.42, 12.52, 12.62, 12.75, 12.85, 12.95, 13.04, 13.14, 13.23, 13.33, 13.43, 13.52, 13.62, 13.72, 13.81, 13.91, 14.00, 14.10, 14.19, 14.29, 14.39, 14.48, 14.58, 14.67, 14.77, 14.86, 14.96, 15.06, 15.15, 15.25, 15.34, 15.44, 15.54, 15.63, 15.73, 15.87, 15.96, 16.06, 16.15, 16.25, 16.35, 16.44, 16.54, 16.63, 16.73, 16.83, 16.92, 17.02, 17.12, 17.21, 17.31, 17.40, 17.50, 17.59, 17.69, 17.79, 17.88, 17.98, 18.07, 18.17, 18.26, 18.36, 18.46, 18.55, 18.65, 18.74, 18.84, 18.98, 19.08, 19.17, 19.27, 19.36, 19.46, 19.56, 19.65, 19.75, 19.84, 19.94, 20.04, 20.13, 20.23, 20.32, 20.42, 20.51, 20.61, 20.71, 20.80, 20.90, 20.99, 21.09, 21.18, 21.28, 21.38, 21.47, 21.57, 21.66, 21.76, 21.86, 21.95, 22.09, 22.19, 22.28, 22.38, 22.48, 22.57, 22.67, 22.76, 22.86, 22.96, 23.05, 23.15, 23.24, 23.34, 23.43, 23.53, 23.63, 23.72, 23.82, 23.92, 24.01, 24.11, 24.20, 24.30, 24.39, 24.49, 24.58, 24.68, 24.78, 24.87, 24.97, 25.06, 25.20, 25.30, 25.40, 25.49, 25.59, 25.68, 25.78, 25.88, 25.97, 26.07, 26.16, 26.26, 26.35, 26.45, 26.55, 26.64, 26.74, 26.83, 26.93, 27.03, 27.12, 27.22, 27.31, 27.41, 27.51, 27.60, 27.70, 27.79, 27.89, 27.99, 28.08, 28.18, 28.32, 28.41, 28.51, 28.61, 28.70, 28.80, 28.89, 28.99, 29.09, 29.18, 29.28, 29.37, 29.47, 29.57, 29.66, 29.76, 29.85, 29.95, 30.04, 30.14, 30.24, 30.33, 30.43, 30.52, 30.62, 30.72, 30.81, 30.91, 31.00, 31.10, 31.19, 31.29, 31.43, 31.53, 31.62, 31.72, 31.82, 31.91, 32.01, 32.10, 32.20, 32.29, 32.39, 32.49, 32.58, 32.68, 32.78, 32.87, 32.96, 33.06, 33.16, 33.25, 33.35, 33.44, 33.54, 33.64, 33.73, 33.83, 33.92, 34.02, 34.12, 34.21, 34.31, 34.40, 34.54, 34.64, 34.73, 34.83, 34.93, 35.02, 35.12, 35.22, 35.31, 35.41, 35.50, 35.60, 35.70, 35.79, 35.89, 35.98, 36.08, 36.18, 36.27, 36.37, 36.46, 36.56, 36.65, 36.75, 36.84, 36.94, 37.04, 37.13, 37.23, 37.32, 37.42, 37.52, 37.66, 37.75, 37.85, 37.94, 38.04, 38.14, 38.23, 38.33, 38.42, 38.52, 38.62, 38.71, 38.81, 38.90, 39.00, 39.10, 39.19, 39.29, 39.38, 39.48, 39.58, 39.67, 39.77, 39.86, 39.96, 40.06, 40.15, 40.25, 40.34, 40.44, 40.53, 40.63, 40.77, 40.87, 40.96, 41.06, 41.15, 41.25, 41.35, 41.44, 41.54, 41.63, 41.73, 41.82, 41.92, 42.02, 42.12, 42.21, 42.31, 42.40, 42.50, 42.59, 42.69, 42.78, 42.88, 42.98, 43.07, 43.17, 43.26, 43.36, 43.46, 43.55, 43.65, 43.74, 43.88, 43.98, 44.08, 44.17, 44.27, 44.36, 44.46, 44.56, 44.65, 44.75, 44.84, 44.94, 45.04, 45.13, 45.23, 45.32, 45.42, 45.52, 45.61, 45.71, 45.81, 45.90, 45.99, 46.09, 46.19, 46.28, 46.38, 46.48, 46.57, 46.67, 46.77, 46.86, 47.00, 47.09, 47.19, 47.29, 47.38, 47.48, 47.58, 47.67, 47.77, 47.86, 47.96, 48.06, 48.15, 48.25, 48.34, 48.44, 48.54, 48.63, 48.73, 48.83, 48.92, 49.02, 49.11, 49.21, 49.30, 49.40, 49.50, 49.59, 49.69, 49.78, 49.88, 49.98, 50.12, 50.21, 50.31, 50.40, 50.50, 50.60, 50.69, 50.79, 50.89, 50.98, 51.08, 51.17, 51.27, 51.37, 51.46, 51.56, 51.66, 51.75, 51.85, 51.95, 52.04, 52.14, 52.23, 52.33, 52.43, 52.52, 52.62, 52.71, 52.81, 52.91, 53.00, 53.10, 53.24, 53.34, 53.43, 53.53, 53.62, 53.72, 53.82, 53.91, 54.01, 54.10, 54.20, 54.29, 54.39, 54.49, 54.58, 54.68, 54.77, 54.87, 54.97, 55.06, 55.16, 55.25, 55.35, 55.45, 55.54, 55.64, 55.73, 55.83, 55.92, 56.02, 56.11, 56.21, 56.35, 56.45, 56.54, 56.64, 56.73, 56.83, 56.93, 57.02, 57.12, 57.21, 57.31, 57.41, 57.50, 57.60, 57.70, 57.79, 57.89, 57.98, 58.08, 58.17, 58.27, 58.37, 58.46, 58.56, 58.65, 58.75, 58.84, 58.94, 59.04, 59.13, 59.23, 59.32, 59.46, 59.56, 59.65, 59.75, 59.85, 59.94, 60.04, 60.13, 60.23, 60.32, 60.42, 60.52, 60.62, 60.71, 60.81, 60.90, 61.00, 61.09, 61.19, 61.28, 61.38, 61.48, 61.57, 61.67, 61.76, 61.86, 61.96, 62.05, 62.15, 62.24, 62.34, 62.44, 62.57, 62.67, 62.77, 62.86, 62.96, 63.06, 63.15, 63.25, 63.34, 63.44, 63.53, 63.63, 63.73, 63.82, 63.92, 64.01, 64.11, 64.20, 64.30, 64.40, 64.49, 64.59, 64.68, 64.78, 64.88, 64.97, 65.07, 65.16, 65.26, 65.35, 65.45, 65.55, 65.69, 65.78, 65.88, 65.97, 66.07, 66.17, 66.26, 66.36, 66.45, 66.55, 66.64, 66.74, 66.84, 66.93, 67.03, 67.12, 67.22, 67.31, 67.41, 67.51, 67.60, 67.70, 67.79, 67.89, 67.99, 68.08, 68.18, 68.27, 68.37, 68.47, 68.56, 68.66, 68.80, 68.89, 68.99, 69.09, 69.18, 69.28, 69.37, 69.47, 69.56, 69.66, 69.75, 69.85, 69.95, 70.04, 70.14, 70.24, 70.33, 70.43, 70.52, 70.62, 70.71, 70.81, 70.91, 71.00, 71.09, 71.19, 71.29, 71.38, 71.48, 71.57, 71.67, 71.77, 71.91, 72.00, 72.10, 72.20, 72.29, 72.39, 72.48, 72.58, 72.67, 72.77, 72.87, 72.96, 73.06, 73.15, 73.25, 73.35, 73.44, 73.54, 73.63, 73.73, 73.82, 73.92, 74.02, 74.11, 74.21, 74.30, 74.40, 74.49, 74.59, 74.69, 74.78, 74.88, 75.02, 75.11, 75.21, 75.31, 75.40, 75.50, 75.59, 75.69, 75.79, 75.88, 75.98, 76.07, 76.17, 76.26, 76.36, 76.45, 76.55, 76.65, 76.74, 76.84, 76.93, 77.03, 77.13, 77.22, 77.32, 77.41, 77.51, 77.60, 77.70, 77.80, 77.89, 77.99, 78.13, 78.22, 78.32, 78.42, 78.51, 78.61, 78.70, 78.80, 78.89, 78.99, 79.09, 79.18, 79.28, 79.37, 79.47, 79.56, 79.66, 79.76, 79.85, 79.95, 80.04, 80.14, 80.23, 80.33, 80.43, 80.52, 80.62, 80.72, 80.81, 80.91, 81.00, 81.10, 81.24, 81.33, 81.43, 81.52, 81.62, 81.72, 81.81, 81.91, 82.01, 82.10, 82.19, 82.29, 82.39, 82.48, 82.58, 82.68, 82.77, 82.86, 82.96, 83.06, 83.15, 83.25, 83.35, 83.44, 83.54, 83.63, 83.73, 83.82, 83.92, 84.01, 84.11, 84.21, 84.35, 84.44, 84.54, 84.63, 84.73, 84.83, 84.92, 85.02, 85.11, 85.21, 85.31, 85.40, 85.50, 85.59, 85.69, 85.78, 85.88, 85.98, 86.07, 86.17, 86.26, 86.36, 86.46, 86.55, 86.65, 86.74, 86.84, 86.93, 87.03, 87.12, 87.22, 87.32, 87.46, 87.55, 87.65, 87.74, 87.84, 87.94, 88.03, 88.13, 88.22, 88.32, 88.41, 88.51, 88.61, 88.70, 88.80, 88.89, 88.99, 89.08, 89.18, 89.28, 89.37, 89.47, 89.56, 89.66, 89.76, 89.85, 89.95, 90.04, 90.14, 90.23, 90.33, 90.43, 90.57, 90.66, 90.76, 90.85, 90.95, 91.04, 91.14, 91.23, 91.33, 91.43, 91.52, 91.62, 91.72, 91.81, 91.90, 92.00, 92.10, 92.19, 92.29, 92.38, 92.48, 92.58, 92.67, 92.77, 92.86, 92.96, 93.06, 93.15, 93.25, 93.34, 93.44, 93.53, 93.67, 93.77, 93.87, 93.96, 94.06, 94.16, 94.25, 94.35, 94.44, 94.54, 94.63, 94.73, 94.82, 94.92, 95.01, 95.11, 95.21, 95.30, 95.40, 95.49, 95.58, 95.68, 95.78, 95.88, 95.97, 96.07, 96.16, 96.26, 96.36, 96.45, 96.55, 96.64, 96.78, 96.88, 96.98, 97.07, 97.17, 97.26, 97.36, 97.45, 97.55, 97.65, 97.74, 97.84, 97.93, 98.03, 98.12, 98.22, 98.32, 98.41, 98.51, 98.61, 98.70, 98.80, 98.89, 98.99, 99.08, 99.18, 99.27, 99.37, 99.47, 99.56, 99.66, 99.75
};
myMFC mfc6 = myMFC(41, 2, 230, 380, 240, 440, arr6);




bool switchMode = false;

void IRAM_ATTR readEncoderISR()
{
	encoder1.readEncoder_ISR();
}

void task1(void * parameter){
  encoder1.begin();
	encoder1.setup(readEncoderISR);
	bool circleValues = false;
	encoder1.setBoundaries(1, 6, circleValues);
	encoder1.setAcceleration(250);

  for(;;)
  {
    if(switchMode == false){
    encoder1.setBoundaries(1,6,circleValues);
    encoder1.disableAcceleration();
    if(encoder1.encoderChanged()){
      value = encoder1.readEncoder();
  switch (value) {
    case 1:
        tft.fillTriangle(20, 10, 20, 30, 40, 20, ST7796S_WHITE);
        tft.fillTriangle(180, 10, 180, 30, 200, 20, ST7796S_BLACK);
        tft.fillTriangle(20, 170, 20, 190, 40, 180, ST7796S_BLACK);
        tft.fillTriangle(180, 170, 180, 190, 200, 180, ST7796S_BLACK);
        tft.fillTriangle(20, 330, 20, 350, 40, 340, ST7796S_BLACK);
        tft.fillTriangle(180, 330, 180, 350, 200, 340, ST7796S_BLACK);
      break;
    case 2:
        tft.fillTriangle(20, 10, 20, 30, 40, 20, ST7796S_BLACK);
        tft.fillTriangle(180, 10, 180, 30, 200, 20, ST7796S_WHITE);
        tft.fillTriangle(20, 170, 20, 190, 40, 180, ST7796S_BLACK);
        tft.fillTriangle(180, 170, 180, 190, 200, 180, ST7796S_BLACK);
        tft.fillTriangle(20, 330, 20, 350, 40, 340, ST7796S_BLACK);
        tft.fillTriangle(180, 330, 180, 350, 200, 340, ST7796S_BLACK);      break;
    case 3:
        tft.fillTriangle(20, 10, 20, 30, 40, 20, ST7796S_BLACK);
        tft.fillTriangle(180, 10, 180, 30, 200, 20, ST7796S_BLACK);
        tft.fillTriangle(20, 170, 20, 190, 40, 180, ST7796S_WHITE);
        tft.fillTriangle(180, 170, 180, 190, 200, 180, ST7796S_BLACK);
        tft.fillTriangle(20, 330, 20, 350, 40, 340, ST7796S_BLACK);
        tft.fillTriangle(180, 330, 180, 350, 200, 340, ST7796S_BLACK);
      break;
    case 4:
        tft.fillTriangle(20, 10, 20, 30, 40, 20, ST7796S_BLACK);
        tft.fillTriangle(180, 10, 180, 30, 200, 20, ST7796S_BLACK);
        tft.fillTriangle(20, 170, 20, 190, 40, 180, ST7796S_BLACK);
        tft.fillTriangle(180, 170, 180, 190, 200, 180, ST7796S_WHITE);
        tft.fillTriangle(20, 330, 20, 350, 40, 340, ST7796S_BLACK);
        tft.fillTriangle(180, 330, 180, 350, 200, 340, ST7796S_BLACK);
      break;
    case 5:
        tft.fillTriangle(20, 10, 20, 30, 40, 20, ST7796S_BLACK);
        tft.fillTriangle(180, 10, 180, 30, 200, 20, ST7796S_BLACK);
        tft.fillTriangle(20, 170, 20, 190, 40, 180, ST7796S_BLACK);
        tft.fillTriangle(180, 170, 180, 190, 200, 180, ST7796S_BLACK);
        tft.fillTriangle(20, 330, 20, 350, 40, 340, ST7796S_WHITE);
        tft.fillTriangle(180, 330, 180, 350, 200, 340, ST7796S_BLACK);
      break;
    case 6:
        tft.fillTriangle(20, 10, 20, 30, 40, 20, ST7796S_BLACK);
        tft.fillTriangle(180, 10, 180, 30, 200, 20, ST7796S_BLACK);
        tft.fillTriangle(20, 170, 20, 190, 40, 180, ST7796S_BLACK);
        tft.fillTriangle(180, 170, 180, 190, 200, 180, ST7796S_BLACK);
        tft.fillTriangle(20, 330, 20, 350, 40, 340, ST7796S_BLACK);
        tft.fillTriangle(180, 330, 180, 350, 200, 340, ST7796S_WHITE);
      break;
    default:
      break;
      }
      previousPosition = value;
  }
    if (encoder1.isEncoderButtonClicked())
    {
      //ignore multiple press in that time milliseconds
      if (millis() - lastPressed < 50)
      {
        return;
      }
      lastPressed = millis();
      selector = value;
      switchMode = !switchMode;
          switch (selector) {
    case 1:   
        if(switchMode == true){
          tft.fillTriangle(20, 10, 20, 30, 40, 20, ST7796S_CYAN);
        }
      break;
    case 2:
        if(switchMode == true){
          tft.fillTriangle(180, 10, 180, 30, 200, 20, ST7796S_CYAN);
        }
      break;
    case 3:
        if(switchMode == true){
          tft.fillTriangle(20, 170, 20, 190, 40, 180, ST7796S_CYAN);
        }
      break;
    case 4:
        if(switchMode == true){
          tft.fillTriangle(180, 170, 180, 190, 200, 180, ST7796S_CYAN);
        }
      break;
    case 5:
        if(switchMode == true){
          tft.fillTriangle(20, 330, 20, 350, 40, 340, ST7796S_CYAN);
        }
      break;
    case 6:
        if(switchMode == true){
      tft.fillTriangle(180, 330, 180, 350, 200, 340, ST7796S_CYAN);
        }
      break;
    default:
      break;
  }
      }
    }
    else{
    encoder1.setBoundaries(0,1000,circleValues);
    encoder1.setAcceleration(250);
    change1 = encoder1.encoderChanged();
    click1 = encoder1.isEncoderButtonClicked();
    if(click1){
      switchMode = !switchMode;
    }
    switch (selector) {
    case 1:
        if(switchMode == false){
          tft.fillTriangle(20, 10, 20, 30, 40, 20, ST7796S_WHITE);
        }
        mfc1.rotaryRead(encoder1, change1, click1, tft);
      break;
    case 2:
        if(switchMode == false){
          tft.fillTriangle(180, 10, 180, 30, 200, 20, ST7796S_WHITE);
        }
        mfc2.rotaryRead(encoder1, change1, click1, tft);
      break;
    case 3:
        if(switchMode == false){
          tft.fillTriangle(20, 170, 20, 190, 40, 180, ST7796S_WHITE);
        }
        mfc3.rotaryRead(encoder1, change1, click1, tft);
      break;
    case 4:
        if(switchMode == false){
          tft.fillTriangle(180, 170, 180, 190, 200, 180, ST7796S_WHITE);
        }
        mfc4.rotaryRead(encoder1, change1, click1, tft);      
        break;
    case 5:
        if(switchMode == false){
          tft.fillTriangle(20, 330, 20, 350, 40, 340, ST7796S_WHITE);
        }
        mfc5.rotaryRead(encoder1, change1, click1, tft);
      break;
    case 6:
        if(switchMode == false){
          tft.fillTriangle(180, 330, 180, 350, 200, 340, ST7796S_WHITE);
        }
        mfc6.rotaryRead(encoder1, change1, click1, tft);
      break;
    default:
      break;
  }
  }
    mfc1.on(tft); 
    mfc2.on(tft);  
    mfc3.on(tft); 
    mfc4.on(tft);  
    mfc5.on(tft); 
    mfc6.on(tft);  
    
}
}




const char* ssid = "d107";
const char* password = "Combustion!2";
const char* PARAM_INPUT_1 = "input1";
int counter = 0;
// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

const char* htmlContent = R"(<!DOCTYPE HTML><html>
<!-- Rui Santos - Complete project details at https://RandomNerdTutorials.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files.
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software. -->
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <style>
      body {
        min-width: 310px;
        max-width: 800px;
        height: 400px;
        margin: 0 auto;
      }
      h2 {
        font-family: Arial;
        font-size: 2.5rem;
        text-align: center;
      }
      #chart-1 {
      width: 50%; /* Adjust the width as needed */
      height: 200px; /* Adjust the height as needed */
      margin: 0 auto;
      margin-bottom: 0px; /* Space between boxes */
      margin-top: 0px; /* Space between boxes */
      }
      #chart-2 {
      width: 50%; /* Adjust the width as needed */
      height: 200px; /* Adjust the height as needed */
      margin: 0 auto;
      margin-bottom: 0px; /* Space between boxes */
      margin-top: 0px; /* Space between boxes */
      }
      #chart-3 {
      width: 50%; /* Adjust the width as needed */
      height: 200px; /* Adjust the height as needed */
      margin: 0 auto;
      margin-bottom: 0px; /* Space between boxes */
      margin-top: 0px; /* Space between boxes */
      }
      #chart-4 {
      width: 50%; /* Adjust the width as needed */
      height: 200px; /* Adjust the height as needed */
      margin: 0 auto;
      margin-bottom: 0px; /* Space between boxes */
      margin-top: 0px; /* Space between boxes */
      }
      #chart-5 {
      width: 50%; /* Adjust the width as needed */
      height: 200px; /* Adjust the height as needed */
      margin: 0 auto;
      margin-bottom: 0px; /* Space between boxes */
      margin-top: 0px; /* Space between boxes */
      }
      #chart-6 {
      width: 50%; /* Adjust the width as needed */
      height: 200px; /* Adjust the height as needed */
      margin: 0 auto;
      margin-bottom: 0px; /* Space between boxes */
      margin-top: 0px; /* Space between boxes */
      }
      .chart-container{
        display: flex;
        justify-content: space-around; /* Adjust spacing between charts */
        flex-wrap: wrap; /* Wrap charts on smaller screens */
        margin: 0 auto;
        padding: 0;
      }
      .input-output{
        width: 30%;
        height: 100px;
        margin: 0 auto;
        padding: 0;
        margin-bottom: 20px; /* Space between boxes */
        margin-top: 20px; /* Space between boxes */
        border: 2px solid #000; /* Border style: 2px width, solid line, black color */
        padding: 20px; /* Optional: Adds padding inside the border */
        display: flex;
        justify-content: space-between; /* Distributes items evenly with space in between */
        flex-direction: column; /* Stack items vertically */

      }
      .output{
        padding: 20px;
        margin: 0 auto;
        margin-bottom: 20px; /* Space between boxes */
        margin-top: 20px; /* Space between boxes */
        flex-direction: row; /* Arrange items in a row */
        justify-content: space-between; /* Distribute items with space between them */
      }
    </style>
  </head>
  <body>
    <h2>MFC CONTROLLER</h2>

    <div class="chart-container">
      <div id="chart-1"=></div>
      <div class = "input-output">
        <form action="/get1" id="inputForm1">
            Percent 1: <input type="text" id="input1" name="Percent 1">
          <input type="submit" value="Submit">
        </form>
        <div class = "output">
            <div id="output1"></div>
        </div>
      </div>
    </div>

    <div class = "chart-container">
      <div id="chart-2"></div>
      <div class = "input-output">
        <form action="/get2" id="inputForm2">
            Percent 2: <input type="text" id="input2" name="Percent 2">
          <input type="submit" value="Submit">
        </form>
        <div class = "output">
            <div id="output2"></div>
        </div>
      </div>
    </div>

    <div class = "chart-container">
      <div id="chart-3"></div>
      <div class = "input-output">
        <form action="/get3" id="inputForm3">
            Percent 3: <input type="text" id="input3" name="Percent 3">
          <input type="submit" value="Submit">
        </form>
        <div class = "output">
            <div id="output3"></div>
        </div>
      </div>
    </div>

      <div class = "chart-container">
      <div id="chart-4"></div>
      <div class = "input-output">
        <form action="/get4" id="inputForm4">
            Percent 4: <input type="text" id="input4" name="Percent 4">
          <input type="submit" value="Submit">
        </form>
        <div class = "output">
            <div id="output4"></div>
        </div>
      </div>
    </div>

      <div class = "chart-container">
      <div id="chart-5"></div>
      <div class = "input-output">
        <form action="/get5" id="inputForm5">
            Percent 5: <input type="text" id="input5" name="Percent 5">
          <input type="submit" value="Submit">
        </form>
        <div class = "output">
            <div id="output5"></div>
        </div>
      </div>
    </div>

      <div class = "chart-container">
      <div id="chart-6"></div>
      <div class = "input-output">
        <form action="/get6" id="inputForm6">
            Percent 6: <input type="text" id="input6" name="Percent 6">
          <input type="submit" value="Submit">
        </form>
        <div class = "output">
            <div id="output6"></div>
        </div>
      </div>
    </div>

  </body>
  <script>
  var chartT = new Highcharts.Chart({
    chart:{ renderTo : 'chart-1' },
    title: { text: 'MFC 1 Percentage' },
    series: [{
      showInLegend: false,
      data: []
    }],
    plotOptions: {
      line: { animation: false,
        dataLabels: { enabled: true }
        }
      },
    xAxis: { type: 'datetime',
      dateTimeLabelFormats: { second: '%H:%M:%S' }
    },
    yAxis: {
      title: { text: 'Percentage (%)' }
    },
    credits: { enabled: false }
  });
  setInterval(function ( ) {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var x = (new Date()).getTime(),
            y = parseFloat(this.responseText);
        //console.log(this.responseText);
        if(chartT.series[0].data.length > 40) {
          chartT.series[0].addPoint([x, y], true, true, true);
        } else {
          chartT.series[0].addPoint([x, y], true, false, true);
        }
        document.getElementById('output1').innerText = "Output 1: " + y;
      }
    };
    xhttp.open("GET", "/mfc1", true);
    xhttp.send();
  }, 1000 ) ;

  var chartH = new Highcharts.Chart({
    chart:{ renderTo:'chart-2' },
    title: { text: 'MFC 2 Percentage' },
    series: [{
      showInLegend: false,
      data: []
    }],
    plotOptions: {
      line: { animation: false,
        dataLabels: { enabled: true }
      }
    },
    xAxis: {
      type: 'datetime',
      dateTimeLabelFormats: { second: '%H:%M:%S' }
    },
    yAxis: {
      title: { text: 'Percentage (%)' }
    },
    credits: { enabled: false }
  });
  setInterval(function ( ) {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var x = (new Date()).getTime(),
            y = parseFloat(this.responseText);
        //console.log(this.responseText);
        if(chartH.series[0].data.length > 40) {
          chartH.series[0].addPoint([x, y], true, true, true);
        } else {
          chartH.series[0].addPoint([x, y], true, false, true);
        }
        document.getElementById('output2').innerText = "Output 2: " + y;
      }
    };
    xhttp.open("GET", "/mfc2", true);
    xhttp.send();
  }, 1000 ) ;

  var chartB = new Highcharts.Chart({
    chart:{ renderTo:'chart-3' },
    title: { text: 'MFC 3 Percentage' },
    series: [{
      showInLegend: false,
      data: []
    }],
    plotOptions: {
      line: { animation: false,
        dataLabels: { enabled: true }
      }
    },
    xAxis: {
      type: 'datetime',
      dateTimeLabelFormats: { second: '%H:%M:%S' }
    },
    yAxis: {
      title: { text: 'Percentage (%)' }
    },
    credits: { enabled: false }
  });
  setInterval(function ( ) {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var x = (new Date()).getTime(),
            y = parseFloat(this.responseText);
        //console.log(this.responseText);
        if(chartB.series[0].data.length > 40) {
          chartB.series[0].addPoint([x, y], true, true, true);
        } else {
          chartB.series[0].addPoint([x, y], true, false, true);
        }
        document.getElementById('output3').innerText = "Output 3: " + y;
      }
    };
    xhttp.open("GET", "/mfc3", true);
    xhttp.send();
  }, 1000 ) ;

  var chartC = new Highcharts.Chart({
    chart:{ renderTo:'chart-4' },
    title: { text: 'MFC 4 Percentage' },
    series: [{
      showInLegend: false,
      data: []
    }],
    plotOptions: {
      line: { animation: false,
        dataLabels: { enabled: true }
      }
    },
    xAxis: {
      type: 'datetime',
      dateTimeLabelFormats: { second: '%H:%M:%S' }
    },
    yAxis: {
      title: { text: 'Percentage (%)' }
    },
    credits: { enabled: false }
  });
  setInterval(function ( ) {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var x = (new Date()).getTime(),
            y = parseFloat(this.responseText);
        //console.log(this.responseText);
        if(chartC.series[0].data.length > 40) {
          chartC.series[0].addPoint([x, y], true, true, true);
        } else {
          chartC.series[0].addPoint([x, y], true, false, true);
        }
        document.getElementById('output4').innerText = "Output 4: " + y;
      }
    };
    xhttp.open("GET", "/mfc4", true);
    xhttp.send();
  }, 1000 ) ;

  var chartV = new Highcharts.Chart({
    chart:{ renderTo:'chart-5' },
    title: { text: 'MFC 5 Percentage' },
    series: [{
      showInLegend: false,
      data: []
    }],
    plotOptions: {
      line: { animation: false,
        dataLabels: { enabled: true }
      }
    },
    xAxis: {
      type: 'datetime',
      dateTimeLabelFormats: { second: '%H:%M:%S' }
    },
    yAxis: {
      title: { text: 'Percentage (%)' }
    },
    credits: { enabled: false }
  });
  setInterval(function ( ) {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var x = (new Date()).getTime(),
            y = parseFloat(this.responseText);
        //console.log(this.responseText);
        if(chartV.series[0].data.length > 40) {
          chartV.series[0].addPoint([x, y], true, true, true);
        } else {
          chartV.series[0].addPoint([x, y], true, false, true);
        }
        document.getElementById('output5').innerText = "Output 5: " + y;
      }
    };
    xhttp.open("GET", "/mfc5", true);
    xhttp.send();
  }, 1000 ) ;

  var chartP = new Highcharts.Chart({
    chart:{ renderTo:'chart-6' },
    title: { text: 'MFC 6 Percentage' },
    series: [{
      showInLegend: false,
      data: []
    }],
    plotOptions: {
      line: { animation: false,
        dataLabels: { enabled: true }
      }
    },
    xAxis: {
      type: 'datetime',
      dateTimeLabelFormats: { second: '%H:%M:%S' }
    },
    yAxis: {
      title: { text: 'Percentage (%)' }
    },
    credits: { enabled: false }
  });
  setInterval(function ( ) {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var x = (new Date()).getTime(),
            y = parseFloat(this.responseText);
        //console.log(this.responseText);
        if(chartP.series[0].data.length > 40) {
          chartP.series[0].addPoint([x, y], true, true, true);
        } else {
          chartP.series[0].addPoint([x, y], true, false, true);
        }
        document.getElementById('output6').innerText = "Output 6: " + y;
      }
    };
    xhttp.open("GET", "/mfc6", true);
    xhttp.send();
  }, 1000 ) ;

  document.getElementById("inputForm1").addEventListener("submit", function(event) {
        event.preventDefault(); // Prevent default form submission
        
        var input1Value = document.getElementById("input1").value;

        // Create XMLHttpRequest object
        var xhr = new XMLHttpRequest();

        // Configure and send the request
        xhr.open("GET", "/get1?Percent 1=" + input1Value, true); // Prepare GET request with query parameter
        xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status === 200) {
              alert("Response from server: " + xhr.responseText); // Display server response
              // Optionally update UI or perform other actions based on response
            } else {
              alert("Failed to submit form. Status code: " + xhr.status);
            }
          }
        };
        xhr.send(); // Send the request
      });


  document.getElementById("inputForm2").addEventListener("submit", function(event) {
        event.preventDefault(); // Prevent default form submission
        
        var input2Value = document.getElementById("input2").value;

        // Create XMLHttpRequest object
        var xhr = new XMLHttpRequest();

        // Configure and send the request
        xhr.open("GET", "/get2?Percent 2=" + input2Value, true); // Prepare GET request with query parameter
        xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status === 200) {
              alert("Response from server: " + xhr.responseText); // Display server response
              // Optionally update UI or perform other actions based on response
            } else {
              alert("Failed to submit form. Status code: " + xhr.status);
            }
          }
        };
        xhr.send(); // Send the request
      });


  document.getElementById("inputForm3").addEventListener("submit", function(event) {
        event.preventDefault(); // Prevent default form submission
        
        var input3Value = document.getElementById("input3").value;

        // Create XMLHttpRequest object
        var xhr = new XMLHttpRequest();

        // Configure and send the request
        xhr.open("GET", "/get3?Percent 3=" + input3Value, true); // Prepare GET request with query parameter
        xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status === 200) {
              alert("Response from server: " + xhr.responseText); // Display server response
              // Optionally update UI or perform other actions based on response
            } else {
              alert("Failed to submit form. Status code: " + xhr.status);
            }
          }
        };
        xhr.send(); // Send the request
      });


  document.getElementById("inputForm4").addEventListener("submit", function(event) {
        event.preventDefault(); // Prevent default form submission
        
        var input4Value = document.getElementById("input4").value;

        // Create XMLHttpRequest object
        var xhr = new XMLHttpRequest();

        // Configure and send the request
        xhr.open("GET", "/get4?Percent 4=" + input4Value, true); // Prepare GET request with query parameter
        xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status === 200) {
              alert("Response from server: " + xhr.responseText); // Display server response
              // Optionally update UI or perform other actions based on response
            } else {
              alert("Failed to submit form. Status code: " + xhr.status);
            }
          }
        };
        xhr.send(); // Send the request
      });


  document.getElementById("inputForm5").addEventListener("submit", function(event) {
        event.preventDefault(); // Prevent default form submission
        
        var input5Value = document.getElementById("input5").value;

        // Create XMLHttpRequest object
        var xhr = new XMLHttpRequest();

        // Configure and send the request
        xhr.open("GET", "/get5?Percent 5=" + input5Value, true); // Prepare GET request with query parameter
        xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status === 200) {
              alert("Response from server: " + xhr.responseText); // Display server response
              // Optionally update UI or perform other actions based on response
            } else {
              alert("Failed to submit form. Status code: " + xhr.status);
            }
          }
        };
        xhr.send(); // Send the request
      });


  document.getElementById("inputForm6").addEventListener("submit", function(event) {
        event.preventDefault(); // Prevent default form submission
        
        var input6Value = document.getElementById("input6").value;

        // Create XMLHttpRequest object
        var xhr = new XMLHttpRequest();

        // Configure and send the request
        xhr.open("GET", "/get6?Percent 6=" + input6Value, true); // Prepare GET request with query parameter
        xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status === 200) {
              alert("Response from server: " + xhr.responseText); // Display server response
              // Optionally update UI or perform other actions based on response
            } else {
              alert("Failed to submit form. Status code: " + xhr.status);
            }
          }
        };
        xhr.send(); // Send the request
      });


  </script>
  </html>)" ;



void setUpServer(){
    // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/html", htmlContent);
  });
  server.on("/mfc1", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", mfc1.getPercent().c_str());
  });
  server.on("/mfc2", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", mfc2.getPercent().c_str());
  });
  server.on("/mfc3", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", mfc3.getPercent().c_str());
  });
  server.on("/mfc4", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", mfc4.getPercent().c_str());
  });
  server.on("/mfc5", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", mfc5.getPercent().c_str());
  });
  server.on("/mfc6", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", mfc6.getPercent().c_str());
  });

  server.on("/get1", HTTP_GET, [](AsyncWebServerRequest *request) {
    if (request->hasParam("Percent 1")) {
      String input1 = request->getParam("Percent 1")->value();
      double potPos1 = input1.toDouble();
      if(0<= potPos1 && potPos1<=100){
      Serial.println("Received Percent 1: " + input1);
      request->send(200, "text/plain", "Percent 1 received: " + input1);
      potPos1 = potPos1*1023/100;
      mfc1.setPosition(mfc1.binarySearch(potPos1*100/1023));
      }
      else{
        request->send(400, "text/plain", "Bad request");
      }
    } 
    else {
      request->send(400, "text/plain", "Bad request");
    }
  });

  server.on("/get2", HTTP_GET, [](AsyncWebServerRequest *request) {
    if (request->hasParam("Percent 2")) {
      String input2 = request->getParam("Percent 2")->value();
      double potPos2 = input2.toDouble();
      if(0<=potPos2 && potPos2<=100){
      Serial.println("Received Percent 2: " + input2);
      request->send(200, "text/plain", "Percent 2 received: " + input2);
      potPos2 = potPos2*1023/100;
      mfc2.setPosition(mfc2.binarySearch(potPos2*100/1023));
      }
      else{
        request->send(400, "text/plain", "Bad request");
      }
    } 
    else {
      request->send(400, "text/plain", "Bad request");
    }
  });

  server.on("/get3", HTTP_GET, [](AsyncWebServerRequest *request) {
    if (request->hasParam("Percent 3")) {
      String input3 = request->getParam("Percent 3")->value();
      double potPos3 = input3.toDouble();
      if(0<=potPos3 && potPos3<=100){
      Serial.println("Received Percent 3: " + input3);
      request->send(200, "text/plain", "Percent 3 received: " + input3);
      potPos3 = potPos3*1023/100;
      mfc3.setPosition(mfc3.binarySearch(potPos3*100/1023));
      }
      else{
        request->send(400, "text/plain", "Bad request");
      }
    } 
    else {
      request->send(400, "text/plain", "Bad request");
    }
  });

  server.on("/get4", HTTP_GET, [](AsyncWebServerRequest *request) {
    if (request->hasParam("Percent 4")) {
      String input4 = request->getParam("Percent 4")->value();
      double potPos4 = input4.toDouble();
      if(0<=potPos4 && potPos4<=100){
      Serial.println("Received Percent 4: " + input4);
      request->send(200, "text/plain", "Percent 4 received: " + input4);
      potPos4 = potPos4*1023/100;
      mfc4.setPosition(mfc4.binarySearch(potPos4*100/1023));
      }
      else{
        request->send(400, "text/plain", "Bad request");
      }
    } 
    else {
      request->send(400, "text/plain", "Bad request");
    }
  });

  server.on("/get5", HTTP_GET, [](AsyncWebServerRequest *request) {
    if (request->hasParam("Percent 5")) {
      String input5 = request->getParam("Percent 5")->value();
      double potPos5 = input5.toDouble();
      if(0<=potPos5 && potPos5<=100){
      Serial.println("Received Percent 5: " + input5);
      request->send(200, "text/plain", "Percent 5 received: " + input5);
      potPos5 = potPos5*1023/100;
      mfc5.setPosition(mfc5.binarySearch(potPos5*100/1023));
      }
      else{
        request->send(400, "text/plain", "Bad request");
      }
    } 
    else {
      request->send(400, "text/plain", "Bad request");
    }
  });

  server.on("/get6", HTTP_GET, [](AsyncWebServerRequest *request) {
    if (request->hasParam("Percent 6")) {
      String input6 = request->getParam("Percent 6")->value();
      double potPos6 = input6.toDouble();
      if(0<=potPos6 && potPos6<=100){
      Serial.println("Received Percent 6: " + input6);
      request->send(200, "text/plain", "Percent 6 received: " + input6);
      potPos6 = potPos6*1023/100;
      mfc6.setPosition(mfc6.binarySearch(potPos6*100/1023));
      }
      else{
        request->send(400, "text/plain", "Bad request");
      }
    } 
    else {
      request->send(400, "text/plain", "Bad request");
    }
  });
  // Start server
  server.begin();
}


void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED && counter < 5) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
    counter++;
  }
  if(counter >= 5){
    Serial.println("WiFi could not connect. Please use encoders.");
  }
  
  else{
  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());
  setUpServer();
  }

  tft.begin();
  tft.setRotation(2);
  tft.fillScreen(ST7796S_BLACK);
  tft.setTextSize(2);
  tft.setCursor(50, 10);
  tft.println("MFC 1");

  tft.setCursor(210, 10);
  tft.println("MFC 2");

  tft.setCursor(50, 170);
  tft.println("MFC 3");

  tft.setCursor(210, 170);
  tft.println("MFC 4");

  tft.setCursor(50, 330);
  tft.println("MFC 5");

  tft.setCursor(210, 330);
  tft.println("MFC 6");

  tft.setCursor(10, 60);
  tft.println("% In: ");
  tft.setCursor(10, 110);
  tft.println("% Out: ");
  tft.drawRect(0,0,160,160,ST7796S_WHITE);

  tft.setCursor(170, 60);
  tft.println("% In: ");
  tft.setCursor(170, 110);
  tft.println("% Out: ");
  tft.drawRect(160,0,160,160,ST7796S_WHITE);


  tft.setCursor(10, 220);
  tft.println("% In: ");
  tft.setCursor(10, 270);
  tft.println("% Out: ");
  tft.drawRect(0,160,160,160,ST7796S_WHITE);


  tft.setCursor(170, 220);
  tft.println("% In: ");
  tft.setCursor(170, 270);
  tft.println("% Out: ");
  tft.drawRect(160,160,160,160,ST7796S_WHITE);

  tft.setCursor(10, 380);
  tft.println("% In: ");
  tft.setCursor(10, 440);
  tft.println("% Out: ");
  tft.drawRect(0,320,160,160,ST7796S_WHITE);

  tft.setCursor(170, 380);
  tft.println("% In: ");
  tft.setCursor(170, 440);
  tft.println("% Out: ");
  tft.drawRect(160,320,160,160,ST7796S_WHITE);


  xTaskCreatePinnedToCore(task1, "Task1", 10000, NULL, 1, NULL, 1); // Task with priority 2
  //xTaskCreatePinnedToCore(task2, "Task2", 10000, NULL, 0, NULL, 0); // Task with priority 2
  SPI.begin();
  SPI.setDataMode(SPI_MODE3);
}

void loop() {
}
